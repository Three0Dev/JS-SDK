{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A,Y,C;A,M,C,c,C,c,E,Y,E;I,K,E,I;C,C,C;A,c,C,U,G,K,C,C;;;;AACA,IAAA,gCAAA,GAAA,4CAAA,CAAA,wBAAA,CAAA,AAAA;A,S,4C,C,G,E;I,O,G,I,G,C,U,G,G,G;Q,O,E,G;K,C;C;A,S,gD,C,G,E,U,E,K,E;I,gD,C,G,E,U,C,C;I,U,C,G,C,G,E,K,C,C;C;A,S,gD,C,G,E,iB,E;I,I,iB,C,G,C,G,C,E,M,I,S,C,gE,C,C;C;A,S,2C,C,Q,E,U,E;I,I,U,G,kD,C,Q,E,U,E,K,C,A;I,O,8C,C,Q,E,U,C,C;C;A,S,8C,C,Q,E,U,E;I,I,U,C,G,E,O,U,C,G,C,I,C,Q,C,C;I,O,U,C,K,C;C;A,S,2C,C,Q,E,U,E,K,E;I,I,U,G,kD,C,Q,E,U,E,K,C,A;I,8C,C,Q,E,U,E,K,C,C;I,O,K,C;C;A,S,kD,C,Q,E,U,E,M,E;I,I,C,U,C,G,C,Q,C,E,M,I,S,C,e,G,M,G,gC,C,C;I,O,U,C,G,C,Q,C,C;C;A,S,8C,C,Q,E,U,E,K,E;I,I,U,C,G,E,U,C,G,C,I,C,Q,E,K,C,C;S;Q,I,C,U,C,Q,E,M,I,S,C,0C,C,C;Q,U,C,K,G,K,C;K;C;A,I,+B,G,a,C,I,O,E,A;AAEA,MAAMA,qCAAN,SAA8BC,gCAAAA,CAAAA,OAA9B;IAQCG,GAAG,GAAG;QACL,OAAO,2CAAA,CAAA,IAAA,EAAA,+BAAA,CAAA,CAAeC,KAAtB,CAAA;KACA;IAEQ,MAAHC,GAAG,GAAU;QAAA,IAATC,GAAS,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAH,CAAG,AAAA;QAClB,IAAI,CAAEA,CAAAA,GAAG,YAAYC,MAAf,IAAyBD,GAAG,IAAI,CAAlC,CAAA,AAAJ,EACC,MAAME,KAAK,CAAC,0BAAD,CAAX,CADD;QAGA,MAAMC,iBAAiB,GAAG,EAA1B,AAAA;QACA,IAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAApB,EAAyBI,CAAC,IAAI,CAA9B,CACCD,iBAAiB,CAACE,IAAlB,CAAuB,2CAAA,CAAA,IAAA,EAAA,+BAAA,CAAA,CAAeN,GAAf,EAAvB,CAAAI,CAAAA;QAGD,MAAMG,OAAO,CAACC,GAAR,CAAYJ,iBAAZ,CAAN,CAAA;KACA;IAnBDR,YAAYC,QAAD,CAAW;QACrB,KAAA,CAAMA,QAAN,CAAA,CAAA;QADqB,gDAAA,CAAA,IAAA,EAAA,+BAAA,EAAA;YAAA,QAAA,EAAA,IAAA;YAAA,KAAA,EAAA,KAAA,CAAA;SAAA,CAAA,CAAA;QAErB,2CAAA,CAAA,IAAA,EAAA,+BAAA,EAAiBA,QAAjB,CAAA,CAAA;KACA;C,CAmBF,wDAzBuC;AA0BhC,MAAMY,gCAAU,GAAG,eAAOC,OAAP,EAAiD;IAAA,IAAjCC,OAAiC,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAvBC,UAAU,CAACD,OAAY,AAAA;IAC1E,IAAI,CAACA,OAAL,EAAc,MAAMR,KAAK,CAAC,4BAAD,CAAX,CAAd;IACA,MAAMU,OAAO,GAAG,MAAM,AAAA,CAAA,GAAAC,sBAAA,CAAA,CAAgBJ,OAAhB,CAAtB,AAAA;IACA,IAAI,CAACG,OAAL,EAAc,MAAMV,KAAK,CAAC,0BAAD,CAAX,CAAd;IAEA,MAAMN,QAAQ,GAAG,MAAMc,OAAO,CAACI,OAAR,CAAgBL,OAAhB,CAAvB,AAAA;IACA,MAAMb,QAAQ,CAACmB,IAAT,EAAN,CAAA;IACA,OAAO,IAAItB,qCAAJ,CAAoBG,QAApB,CAAP,CAAA;CAPM,AAQN;A,c,C,U,G,gC,C;;;;A,Y,C;A,M,C,c,C,c,E,Y,E;I,K,E,I;C,C,C;A,c,C,e,G,K,C,C;A,c,C,U,G,gC,C;A,c,C,kB,G,wC,C;;ACpCD,IAAA,8BAAA,GAAA,4CAAA,CAAA,cAAA,CAAA,AAAA;A,S,4C,C,G,E;I,O,G,I,G,C,U,G,G,G;Q,O,E,G;K,C;C;AADA,4CAAA;AAGA,wDAAA;AACO,MAAMiB,qCAAe,GAAG,OAAOJ,OAAP,GAAmB;IACjD,IAAI,CAACO,8BAAAA,CAAAA,OAAA,CAAQC,cAAR,CAAuBR,OAAvB,CAAL,EACC,OAAO,KAAP,CAAA;IAGD,MAAMS,iBAAiB,GAAG,MAAMP,UAAU,CAACQ,QAAX,CAAoBC,cAApB,CAAmC;iBAClEX,OAAAA;KAD+B,CAAhC,AAAmE;IAGnE,OAAOS,iBAAP,CAAA;CARM,AASN;A,c,C,e,G,qC,C;AAEM,SAASG,gCAAT,CAAoBC,GAApB,EAAyB;IAC/B,OAAOA,GAAG,IAAI,OAAOA,GAAP,KAAe,QAA7B,CAAA;CACA;AAEM,SAASC,wCAAT,CAA4BzB,KAA5B,EAAmC;IACzC,OAAOA,KAAK,IAAIA,KAAK,YAAY0B,MAAjC,CAAA;CACA;;;;;A,Y,C;A,M,C,c,C,c,E,Y,E;I,K,E,I;C,C,C;A,c,C,O,G,K,C,C;A,S,gD,C,G,E,U,E,K,E;I,gD,C,G,E,U,C,C;I,U,C,G,C,G,E,K,C,C;C;A,S,gD,C,G,E,iB,E;I,I,iB,C,G,C,G,C,E,M,I,S,C,gE,C,C;C;A,S,2C,C,Q,E,U,E;I,I,U,G,kD,C,Q,E,U,E,K,C,A;I,O,8C,C,Q,E,U,C,C;C;A,S,8C,C,Q,E,U,E;I,I,U,C,G,E,O,U,C,G,C,I,C,Q,C,C;I,O,U,C,K,C;C;A,S,2C,C,Q,E,U,E,K,E;I,I,U,G,kD,C,Q,E,U,E,K,C,A;I,8C,C,Q,E,U,E,K,C,C;I,O,K,C;C;A,S,kD,C,Q,E,U,E,M,E;I,I,C,U,C,G,C,Q,C,E,M,I,S,C,e,G,M,G,gC,C,C;I,O,U,C,G,C,Q,C,C;C;A,S,8C,C,Q,E,U,E,K,E;I,I,U,C,G,E,U,C,G,C,I,C,Q,E,K,C,C;S;Q,I,C,U,C,Q,E,M,I,S,C,0C,C,C;Q,U,C,K,G,K,C;K;C;A,I,+B,G,a,C,I,O,E,A;ACrBc,MAAM9B,8BAAN;IAOd+B,QAAQ,CAACC,UAAD,EAAa;QACpB,2CAAA,CAAA,IAAA,EAAA,+BAAA,CAAA,CAAeC,MAAf,CAAsBC,EAAtB,CAAyB,YAAzB,EAAuC,IAAMF,UAAU,EAAvD,CAAA,CAAA;KACA;IAND/B,YAAYC,QAAD,CAAW;QAAA,gDAAA,CAAA,IAAA,EAAA,+BAAA,EAAA;YAAA,QAAA,EAAA,IAAA;YAAA,KAAA,EAAA,KAAA,CAAA;SAAA,CAAA,CAAA;QACrB,2CAAA,CAAA,IAAA,EAAA,+BAAA,EAAiBA,QAAjB,CAAA,CAAA;KACA;CAL4B;A,c,C,O,G,8B,C;;;;;;A,Y,C;A,M,C,c,C,c,E,Y,E;I,K,E,I;C,C,C;A,c,C,W,G,K,C,C;;;ACC9B,IAAA,gCAAA,GAAA,4CAAA,CAAA,wBAAA,CAAA,AAAA;;;A,S,4C,C,G,E;I,O,G,I,G,C,U,G,G,G;Q,O,E,G;K,C;C;A,S,gD,C,G,E,U,E,K,E;I,gD,C,G,E,U,C,C;I,U,C,G,C,G,E,K,C,C;C;A,S,gD,C,G,E,iB,E;I,I,iB,C,G,C,G,C,E,M,I,S,C,gE,C,C;C;A,S,2C,C,Q,E,U,E;I,I,U,G,kD,C,Q,E,U,E,K,C,A;I,O,8C,C,Q,E,U,C,C;C;A,S,8C,C,Q,E,U,E;I,I,U,C,G,E,O,U,C,G,C,I,C,Q,C,C;I,O,U,C,K,C;C;A,S,2C,C,Q,E,U,E,K,E;I,I,U,G,kD,C,Q,E,U,E,K,C,A;I,8C,C,Q,E,U,E,K,C,C;I,O,K,C;C;A,S,kD,C,Q,E,U,E,M,E;I,I,C,U,C,G,C,Q,C,E,M,I,S,C,e,G,M,G,gC,C,C;I,O,U,C,G,C,Q,C,C;C;A,S,8C,C,Q,E,U,E,K,E;I,I,U,C,G,E,U,C,G,C,I,C,Q,E,K,C,C;S;Q,I,C,U,C,Q,E,M,I,S,C,0C,C,C;Q,U,C,K,G,K,C;K;C;A,I,+B,G,a,C,I,O,E,A;AAGA,MAAMiC,sCAAN,SAA+BnC,gCAAAA,CAAAA,OAA/B;IAQCG,GAAG,GAAa;QAAA,IAAZyB,GAAY,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAN,IAAM,AAAA;QACf,IAAIA,GAAJ,EAAS;YACR,IAAI,CAAE,CAAA,OAAOA,GAAP,KAAe,QAAjB,CAAA,AAAJ,EAAgC,MAAMpB,KAAK,CAAC,iBAAD,CAAX,CAAhC;YACA,OAAO,2CAAA,CAAA,IAAA,EAAA,+BAAA,CAAA,CAAeL,GAAf,CAAmByB,GAAnB,CAAA,CAAwB,CAA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,CAAA,wBAAA,CAAA,AAAA;;A,S,4C,C,G,E;I,O,G,I,G,C,U,G,G,G;Q,O,E,G;K,C;C;A,S,gD,C,G,E,U,E,K,E;I,gD,C,G,E,U,C,C;I,U,C,G,C,G,E,K,C,C;C;A,S,gD,C,G,E,iB,E;I,I,iB,C,G,C,G,C,E,M,I,S,C,gE,C,C;C;A,S,2C,C,Q,E,U,E;I,I,U,G,kD,C,Q,E,U,E,K,C,A;I,O,8C,C,Q,E,U,C,C;C;A,S,8C,C,Q,E,U,E;I,I,U,C,G,E,O,U,C,G,C,I,C,Q,C,C;I,O,U,C,K,C;C;A,S,2C,C,Q,E,U,E,K,E;I,I,U,G,kD,C,Q,E,U,E,K,C,A;I,8C,C,Q,E,U,E,K,C,C;I,O,K,C;C;A,S,kD,C,Q,E,U,E,M,E;I,I,C,U,C,G,C,Q,C,E,M,I,S,C,e,G,M,G,gC,C,C;I,O,U,C,G,C,Q,C,C;C;A,S,8C,C,Q,E,U,E,K,E;I,I,U,C,G,E,U,C,G,C,I,C,Q,E,K,C,C;S;Q,I,C,U,C,Q,E,M,I,S,C,0C,C,C;Q,U,C,K,G,K,C;K;C;A,I,+B,G,a,C,I,O,E,A;AAGA,MAAMkD,sCAAN,SAA+BpD,gCAAAA,CAAAA,OAA/B;IAQCqD,QAAQ,GAAG;QACV,OAAA,2CAAA,CAAO,IAAP,EAAA,+BAAA,CAAA,CAAA;KACA;IAEDlD,GAAG,CAACyB,GAAD,EAAM;QACR,IAAI,CAAEA,CAAAA,GAAG,IAAIA,GAAG,YAAY0B,MAAxB,CAAA,AAAJ,EAAqC,MAAM9C,KAAK,CAAC,iBAAD,CAAX,CAArC;QACA,OAAO,2CAAA,CAAA,IAAA,EAAA,+BAAA,CAAA,CAAeL,GAAf,CAAmByB,GAAnB,CAAP,CAAA;KAdsC;IAkBvC2B,MAAM,GAAG;QACR,OAAO,2CAAA,CAAA,IAAA,EAAA,+BAAA,CAAA,CAAe1C,GAAtB,CAAA;KAnBsC;IAuB9B,MAAH0B,GAAG,CAACX,GAAD,EAAMxB,KAAN,EAAa;QACrB,IAAI,CAAEwB,CAAAA,GAAG,IAAIA,GAAG,YAAY0B,MAAxB,CAAA,AAAJ,EAAqC,MAAM9C,KAAK,CAAC,iBAAD,CAAX,CAArC;QACA,OAAO,2CAAA,CAAA,IAAA,EAAA,+BAAA,CAAA,CAAegC,GAAf,CAAmBZ,GAAnB,EAAwBxB,KAAxB,CAAP,CAAA;KACA;IAvBDH,YAAYC,QAAD,CAAW;QACrB,KAAA,CAAMA,QAAN,CAAA,CAAA;QADqB,gDAAA,CAAA,IAAA,EAAA,+BAAA,EAAA;YAAA,QAAA,EAAA,IAAA;YAAA,KAAA,EAAA,KAAA,CAAA;SAAA,CAAA,CAAA;QAErB,2CAAA,CAAA,IAAA,EAAA,+BAAA,EAAiBA,QAAjB,CAAA,CAAA;KACA;C,CAuBF,wDA7BwC;AA8BjC,MAAMsD,iCAAW,GAAG,eAAOzC,OAAP,EAAiD;IAAA,IAAjCC,OAAiC,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAvBC,UAAU,CAACD,OAAY,AAAA;IAC3E,MAAMR,KAAK,CAAC,iBAAD,CAAX,CAD2E,CAG3E,6DAFA;AAGA,oDAAA;AACA,2DAAA;AAEA,iDAAA;AACA,2CAAA;CARM,AASN;A,c,C,W,G,iC,C;;;;;A,Y,C;A,M,C,c,C,c,E,Y,E;I,K,E,I;C,C,C;A,c,C,O,G,K,C,C;;AC1CD,IAAA,gCAAA,GAAA,4CAAA,CAAA,wBAAA,CAAA,AAAA;;A,S,4C,C,G,E;I,O,G,I,G,C,U,G,G,G;Q,O,E,G;K,C;C;A,S,gD,C,G,E,U,E,K,E;I,gD,C,G,E,U,C,C;I,U,C,G,C,G,E,K,C,C;C;A,S,gD,C,G,E,iB,E;I,I,iB,C,G,C,G,C,E,M,I,S,C,gE,C,C;C;A,S,2C,C,Q,E,U,E;I,I,U,G,kD,C,Q,E,U,E,K,C,A;I,O,8C,C,Q,E,U,C,C;C;A,S,8C,C,Q,E,U,E;I,I,U,C,G,E,O,U,C,G,C,I,C,Q,C,C;I,O,U,C,K,C;C;A,S,2C,C,Q,E,U,E,K,E;I,I,U,G,kD,C,Q,E,U,E,K,C,A;I,8C,C,Q,E,U,E,K,C,C;I,O,K,C;C;A,S,kD,C,Q,E,U,E,M,E;I,I,C,U,C,G,C,Q,C,E,M,I,S,C,e,G,M,G,gC,C,C;I,O,U,C,G,C,Q,C,C;C;A,S,8C,C,Q,E,U,E,K,E;I,I,U,C,G,E,U,C,G,C,I,C,Q,E,K,C,C;S;Q,I,C,U,C,Q,E,M,I,S,C,0C,C,C;Q,U,C,K,G,K,C;K;C;A,I,+B,G,a,C,I,O,E,A;AAGA,MAAMiD,kCAAN,SAA2BzD,gCAAAA,CAAAA,OAA3B;IAQCqD,QAAQ,GAAG;QACV,OAAA,2CAAA,CAAO,IAAP,EAAA,+BAAA,CAAA,CAAA;KACA;IAEDlD,GAAG,CAACyB,GAAD,EAAM;QACR,IAAI,CAAEA,CAAAA,GAAG,IAAIA,GAAG,YAAY0B,MAAxB,CAAA,AAAJ,EAAqC,MAAM9C,KAAK,CAAC,iBAAD,CAAX,CAArC;QACA,OAAO,2CAAA,CAAA,IAAA,EAAA,+BAAA,CAAA,CAAeL,GAAf,CAAmByB,GAAnB,CAAA,CAAwB8B,GAAxB,CAA6BrB,CAAAA,CAAD,GAAOA,CAAC,CAACsB,OAAF,CAAUvD,KAA7C,CAAP,CAAA;KACA;IAEDsC,GAAG,CAACtC,KAAD,EAAQ;QACV,OAAO,2CAAA,CAAA,IAAA,EAAA,+BAAA,CAAA,CAAesC,GAAf,CAAmBtC,KAAnB,CAAP,CAAA;KAlBkC;IAsBnCmD,MAAM,GAAG;QACR,OAAO,2CAAA,CAAA,IAAA,EAAA,+BAAA,CAAA,CAAe1C,GAAtB,CAAA;KAvBkC;IA2B1B,MAAH0B,GAAG,CAACX,GAAD,EAAMxB,KAAN,EAAa;QACrB,IAAI,CAAEwB,CAAAA,GAAG,IAAIA,GAAG,YAAY0B,MAAxB,CAAA,AAAJ,EAAqC,MAAM9C,KAAK,CAAC,iBAAD,CAAX,CAArC;QACA,OAAO,2CAAA,CAAA,IAAA,EAAA,+BAAA,CAAA,CAAegC,GAAf,CAAmBZ,GAAnB,EAAwBxB,KAAxB,CAAP,CAAA;KACA;IA3BDH,YAAYC,QAAD,CAAW;QACrB,KAAA,CAAMA,QAAN,CAAA,CAAA;QADqB,gDAAA,CAAA,IAAA,EAAA,+BAAA,EAAA;YAAA,QAAA,EAAA,IAAA;YAAA,KAAA,EAAA,KAAA,CAAA;SAAA,CAAA,CAAA;QAErB,2CAAA,CAAA,IAAA,EAAA,+BAAA,EAAiBA,QAAjB,CAAA,CAAA;KACA;C,CA2BF,wDAjCoC;AAkC7B,MAAM0D,6BAAO,GAAG,eAAO7C,OAAP,EAAiD;IAAA,IAAjCC,OAAiC,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAvBC,UAAU,CAACD,OAAY,AAAA;IACvE,MAAMR,KAAK,CAAC,iBAAD,CAAX,CADuE,CAGvE,6DAFA;AAGA,oDAAA;AACA,2DAAA;AAEA,iDAAA;AACA,uCAAA;CARM,AASN;A,c,C,O,G,6B,C;;;;;A,Y,C;A,M,C,c,C,c,E,Y,E;I,K,E,I;C,C,C;A,c,C,W,G,K,C,C;;AC/CD,IAAA,gCAAA,GAAA,4CAAA,CAAA,wBAAA,CAAA,AAAA;;;A,S,4C,C,G,E;I,O,G,I,G,C,U,G,G,G;Q,O,E,G;K,C;C;A,S,gD,C,G,E,U,E,K,E;I,gD,C,G,E,U,C,C;I,U,C,G,C,G,E,K,C,C;C;A,S,gD,C,G,E,iB,E;I,I,iB,C,G,C,G,C,E,M,I,S,C,gE,C,C;C;A,S,2C,C,Q,E,U,E;I,I,U,G,kD,C,Q,E,U,E,K,C,A;I,O,8C,C,Q,E,U,C,C;C;A,S,8C,C,Q,E,U,E;I,I,U,C,G,E,O,U,C,G,C,I,C,Q,C,C;I,O,U,C,K,C;C;A,S,2C,C,Q,E,U,E,K,E;I,I,U,G,kD,C,Q,E,U,E,K,C,A;I,8C,C,Q,E,U,E,K,C,C;I,O,K,C;C;A,S,kD,C,Q,E,U,E,M,E;I,I,C,U,C,G,C,Q,C,E,M,I,S,C,e,G,M,G,gC,C,C;I,O,U,C,G,C,Q,C,C;C;A,S,8C,C,Q,E,U,E,K,E;I,I,U,C,G,E,U,C,G,C,I,C,Q,E,K,C,C;S;Q,I,C,U,C,Q,E,M,I,S,C,0C,C,C;Q,U,C,K,G,K,C;K;C;A,I,+B,G,a,C,I,O,E,A;AAGA,MAAMqD,gCAAN,SAAyB7D,gCAAAA,CAAAA,OAAzB;IAQCqD,QAAQ,GAAG;QACV,OAAA,2CAAA,CAAO,IAAP,EAAA,+BAAA,CAAA,CAAA;KACA;IAEDlD,GAAG,CAACyB,GAAD,EAAM;QACR,IAAI,CAAEA,CAAAA,GAAG,IAAIA,GAAG,YAAY0B,MAAxB,CAAA,AAAJ,EAAqC,MAAM9C,KAAK,CAAC,iBAAD,CAAX,CAArC;QACA,OAAO,2CAAA,CAAA,IAAA,EAAA,+BAAA,CAAA,CAAeL,GAAf,CAAmByB,GAAnB,CAAP,CAAA;KACA;IAED2B,MAAM,GAAG;QACR,OAAO,2CAAA,CAAA,IAAA,EAAA,+BAAA,CAAA,CAAe1C,GAAtB,CAAA;KACA;IAEQ,MAAH0B,GAAG,CAACX,GAAD,EAAMxB,KAAN,EAAa;QACrB,IAAI,CAAEwB,CAAAA,GAAG,IAAIA,GAAG,YAAY0B,MAAxB,CAAA,AAAJ,EAAqC,MAAM9C,KAAK,CAAC,iBAAD,CAAX,CAArC;QACA,MAAM,2CAAA,CAAA,IAAA,EAAA,+BAAA,CAAA,CAAegC,GAAf,CAAmBZ,GAAnB,EAAwBxB,KAAxB,CAAN,CAAA;KACA;IAEW,MAANyC,MAAM,CAACjB,GAAD,EAAM;QACjB,IAAI,CAAEA,CAAAA,GAAG,IAAIA,GAAG,YAAY0B,MAAxB,CAAA,AAAJ,EAAqC,MAAM9C,KAAK,CAAC,iBAAD,CAAX,CAArC;QACA,MAAM,2CAAA,CAAA,IAAA,EAAA,+BAAA,CAAA,CAAeqC,MAAf,CAAsBjB,GAAtB,CAAN,CAAA;KACA;IA1BD3B,YAAYC,QAAD,CAAW;QACrB,KAAA,CAAMA,QAAN,CAAA,CAAA;QADqB,gDAAA,CAAA,IAAA,EAAA,+BAAA,EAAA;YAAA,QAAA,EAAA,IAAA;YAAA,KAAA,EAAA,KAAA,CAAA;SAAA,CAAA,CAAA;QAErB,2CAAA,CAAA,IAAA,EAAA,+BAAA,EAAiBA,QAAjB,CAAA,CAAA;KACA;C,CA0BF,wDAhCkC;AAiC3B,MAAM4D,iCAAW,GAAG,eAAO/C,OAAP,EAAiD;IAAA,IAAjCC,OAAiC,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAvBC,UAAU,CAACD,OAAY,AAAA;IAC3E,IAAI,CAACA,OAAL,EAAc,MAAMR,KAAK,CAAC,4BAAD,CAAX,CAAd;IACA,MAAMU,OAAO,GAAG,MAAM,AAAA,CAAA,GAAAC,sBAAA,CAAA,CAAgBJ,OAAhB,CAAtB,AAAA;IACA,IAAI,CAACG,OAAL,EAAc,MAAMV,KAAK,CAAC,0BAAD,CAAX,CAAd;IAEA,MAAMN,QAAQ,GAAG,MAAMc,OAAO,CAAC+C,QAAR,CAAiBhD,OAAjB,CAAvB,AAAA;IACA,MAAMb,QAAQ,CAACmB,IAAT,EAAN,CAAA;IACA,OAAO,IAAIwC,gCAAJ,CAAe3D,QAAf,CAAP,CAAA;CAPM,AAQN;A,c,C,W,G,iC,C;;;;;A,Y,C;A,M,C,c,C,yB,E,Y,E;I,K,E,I;C,C,C;A,yB,C,U,G,gC,C;A,yB,C,W,G,iC,C;A,yB,C,W,G,iC,C;A,yB,C,O,G,6B,C;A,yB,C,W,G,iC,C;A,yB,C,S,G,+B,C;;A,Y,C;A,M,C,c,C,yB,E,Y,E;I,K,E,I;C,C,C;A,yB,C,Q,G,yB,C,I,G,yB,C,Q,G,yB,C,Q,G,yB,C,O,G,K,C,C;;AE5CD,IAAA,6BAAA,GAAA,6CAAA,CAAA,wBAAA,CAAA,AAAA;A,yB,C,O,G,6B,C;;AACA,IAAA,8BAAA,GAAA,6CAAA,CAAA,wBAAA,CAAA,AAAA;A,yB,C,Q,G,8B,C;;AACA,IAAA,8BAAA,GAAA,6CAAA,CAAA,wBAAA,CAAA,AAAA;A,yB,C,Q,G,8B,C;;AACA,IAAA,0BAAA,GAAA,6CAAA,CAAA,wBAAA,CAAA,AAAA;A,yB,C,I,G,0B,C;;AACA,IAAA,8BAAA,GAAA,6CAAA,CAAA,wBAAA,CAAA,AAAA;A,yB,C,Q,G,8B,C;A,S,8C,C,Y,E;I,I,O,O,K,U,E,O,I,C;I,I,iB,G,I,O,E,A;I,I,gB,G,I,O,E,A;I,O,A,C,8C,G,S,W,E;Q,O,W,G,gB,G,iB,C;K,C,C,Y,C,C;C;A,S,6C,C,G,E,W,E;I,I,C,W,I,G,I,G,C,U,E,O,G,C;I,I,G,K,I,I,O,G,K,Q,I,O,G,K,U,E,O;Q,O,E,G;K,C;I,I,K,G,8C,C,W,C,A;I,I,K,I,K,C,G,C,G,C,E,O,K,C,G,C,G,C,C;I,I,M,G,E,A;I,I,qB,G,M,C,c,I,M,C,wB,A;I,I,I,G,I,G,C,I,G,K,S,I,M,C,S,C,c,C,I,C,G,E,G,C,E;Q,I,I,G,qB,G,M,C,wB,C,G,E,G,C,G,I,A;Q,I,I,I,C,I,C,G,I,I,C,G,C,A,E,M,C,c,C,M,E,G,E,I,C,C;a,M,C,G,C,G,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","sources":["src/database/wrappers/counter.js","src/database/wrappers/utils.js","src/database/wrappers/database.js","src/database/wrappers/docstore.js","src/database/wrappers/eventlog.js","src/database/wrappers/feed.js","src/database/wrappers/keyvalue.js","src/database/index.js","src/database/wrappers/index.js"],"sourcesContent":["import { isValidDatabase } from './utils'\r\nimport Database from './database'\r\n\r\nclass CounterDatabase extends Database {\r\n\t#database\r\n\r\n\tconstructor(database) {\r\n\t\tsuper(database)\r\n\t\tthis.#database = database\r\n\t}\r\n\r\n\tget() {\r\n\t\treturn this.#database.value\r\n\t}\r\n\r\n\tasync inc(amt = 1) {\r\n\t\tif (!(amt instanceof Number && amt >= 1))\r\n\t\t\tthrow Error('Valid amount is required')\r\n\r\n\t\tconst incrementPromises = []\r\n\t\tfor (let i = 0; i < amt; i += 1) {\r\n\t\t\tincrementPromises.push(this.#database.inc())\r\n\t\t}\r\n\r\n\t\tawait Promise.all(incrementPromises)\r\n\t}\r\n}\r\n\r\n// eslint-disable-next-line import/prefer-default-export\r\nexport const getCounter = async (address, orbitdb = globalThis.orbitdb) => {\r\n\tif (!orbitdb) throw Error('OrbitDB is not initialized')\r\n\tconst isValid = await isValidDatabase(address)\r\n\tif (!isValid) throw Error('Invalid database address')\r\n\r\n\tconst database = await orbitdb.counter(address)\r\n\tawait database.load()\r\n\treturn new CounterDatabase(database)\r\n}\r\n","// import { isValidAddress } from 'orbit-db'\r\nimport OrbitDB from 'orbit-db'\r\n\r\n// eslint-disable-next-line import/prefer-default-export\r\nexport const isValidDatabase = async (address) => {\r\n\tif (!OrbitDB.isValidAddress(address)) {\r\n\t\treturn false\r\n\t}\r\n\r\n\tconst isProjectDatabase = await globalThis.contract.valid_database({\r\n\t\taddress,\r\n\t})\r\n\treturn isProjectDatabase\r\n}\r\n\r\nexport function isValidKey(key) {\r\n\treturn key && typeof key === 'string'\r\n}\r\n\r\nexport function isValidValueObject(value) {\r\n\treturn value && value instanceof Object\r\n}\r\n","export default class Database {\r\n\t#database\r\n\r\n\tconstructor(database) {\r\n\t\tthis.#database = database\r\n\t}\r\n\r\n\tonChange(callbackfn) {\r\n\t\tthis.#database.events.on('replicated', () => callbackfn())\r\n\t}\r\n}\r\n","import { v4 as uuidv4 } from 'uuid'\r\nimport Database from './database'\r\nimport { isValidDatabase, isValidKey, isValidValueObject } from './utils'\r\n\r\nclass DocumentDatabase extends Database {\r\n\t#database\r\n\r\n\tconstructor(database) {\r\n\t\tsuper(database)\r\n\t\tthis.#database = database\r\n\t}\r\n\r\n\tget(key = null) {\r\n\t\tif (key) {\r\n\t\t\tif (!(typeof key === 'string')) throw Error('Key is required')\r\n\t\t\treturn this.#database.get(key)[0]\r\n\t\t}\r\n\t\treturn this.where((e) => e !== null)\r\n\t}\r\n\r\n\twhere(callbackfn) {\r\n\t\treturn this.#database.query(callbackfn)\r\n\t}\r\n\r\n\tasync set(key, value) {\r\n\t\tif (!isValidKey(key)) throw Error('Key is required')\r\n\t\tif (!isValidValueObject(value)) throw Error('Value is required')\r\n\t\tawait this.#database.put({ _id: key, ...value })\r\n\t}\r\n\r\n\tasync add(value) {\r\n\t\tconst id = uuidv4()\r\n\t\tif (!isValidValueObject(value)) throw Error('Value is required')\r\n\t\tawait this.set(id, value)\r\n\t\treturn id\r\n\t}\r\n\r\n\tasync delete(key) {\r\n\t\tif (!isValidKey(key)) throw Error('Key is required')\r\n\t\tawait this.#database.del(key)\r\n\t}\r\n\r\n\tasync update(key, value) {\r\n\t\tif (!isValidKey(key)) throw Error('Key is required')\r\n\t\tif (!isValidValueObject(value)) throw Error('Value is required')\r\n\r\n\t\tconst doc = this.get(key)\r\n\t\tawait this.#database.put(key, { ...doc, ...value })\r\n\t}\r\n}\r\n\r\n// eslint-disable-next-line import/prefer-default-export\r\nexport const getDocStore = async (\r\n\taddress,\r\n\tindexBy,\r\n\torbitdb = globalThis.orbitdb\r\n) => {\r\n\tif (!orbitdb) throw Error('OrbitDB is not initialized')\r\n\tconst isValid = await isValidDatabase(address)\r\n\tif (!isValid) throw Error('Invalid database address')\r\n\r\n\tconst database = await orbitdb.docs(address, indexBy)\r\n\tawait database.load()\r\n\treturn new DocumentDatabase(database)\r\n}\r\n","/* eslint-disable no-unused-vars */\r\nimport Database from './database'\r\nimport { isValidDatabase } from './utils'\r\n\r\nclass EventLogDatabase extends Database {\r\n\t#database\r\n\r\n\tconstructor(database) {\r\n\t\tsuper(database)\r\n\t\tthis.#database = database\r\n\t}\r\n\r\n\tinstance() {\r\n\t\treturn this.#database\r\n\t}\r\n\r\n\tget(key) {\r\n\t\tif (!(key && key instanceof String)) throw Error('Key is required')\r\n\t\treturn this.#database.get(key)\r\n\t}\r\n\r\n\t// TODO Should we implement this?\r\n\tgetAll() {\r\n\t\treturn this.#database.all\r\n\t}\r\n\r\n\t// TODO Check if put creates a new entry for pre-exisiting ID\r\n\tasync set(key, value) {\r\n\t\tif (!(key && key instanceof String)) throw Error('Key is required')\r\n\t\treturn this.#database.put(key, value)\r\n\t}\r\n}\r\n\r\n// eslint-disable-next-line import/prefer-default-export\r\nexport const getEventLog = async (address, orbitdb = globalThis.orbitdb) => {\r\n\tthrow Error('Not implemented')\r\n\r\n\t//   if (!orbitdb) throw Error('OrbitDB is not initialized');\r\n\t//   const isValid = await isValidDatabase(address);\r\n\t//   if (!isValid) throw Error('Invalid database address');\r\n\r\n\t//   const database = await orbitdb.log(address);\r\n\t//   return new EventLogDatabase(database);\r\n}\r\n","/* eslint-disable no-unused-vars */\r\nimport Database from './database'\r\nimport { isValidDatabase } from './utils'\r\n\r\nclass FeedDatabase extends Database {\r\n\t#database\r\n\r\n\tconstructor(database) {\r\n\t\tsuper(database)\r\n\t\tthis.#database = database\r\n\t}\r\n\r\n\tinstance() {\r\n\t\treturn this.#database\r\n\t}\r\n\r\n\tget(key) {\r\n\t\tif (!(key && key instanceof String)) throw Error('Key is required')\r\n\t\treturn this.#database.get(key).map((e) => e.payload.value)\r\n\t}\r\n\r\n\tadd(value) {\r\n\t\treturn this.#database.add(value)\r\n\t}\r\n\r\n\t// TODO Should we implement this?\r\n\tgetAll() {\r\n\t\treturn this.#database.all\r\n\t}\r\n\r\n\t// TODO Check if put creates a new entry for pre-exisiting ID\r\n\tasync set(key, value) {\r\n\t\tif (!(key && key instanceof String)) throw Error('Key is required')\r\n\t\treturn this.#database.put(key, value)\r\n\t}\r\n}\r\n\r\n// eslint-disable-next-line import/prefer-default-export\r\nexport const getFeed = async (address, orbitdb = globalThis.orbitdb) => {\r\n\tthrow Error('Not implemented')\r\n\r\n\t//   if (!orbitdb) throw Error('OrbitDB is not initialized');\r\n\t//   const isValid = await isValidDatabase(address);\r\n\t//   if (!isValid) throw Error('Invalid database address');\r\n\r\n\t//   const database = await orbitdb.log(address);\r\n\t//   return new FeedDatabase(database);\r\n}\r\n","import Database from './database'\r\nimport { isValidDatabase } from './utils'\r\n\r\nclass KVDatabase extends Database {\r\n\t#database\r\n\r\n\tconstructor(database) {\r\n\t\tsuper(database)\r\n\t\tthis.#database = database\r\n\t}\r\n\r\n\tinstance() {\r\n\t\treturn this.#database\r\n\t}\r\n\r\n\tget(key) {\r\n\t\tif (!(key && key instanceof String)) throw Error('Key is required')\r\n\t\treturn this.#database.get(key)\r\n\t}\r\n\r\n\tgetAll() {\r\n\t\treturn this.#database.all\r\n\t}\r\n\r\n\tasync set(key, value) {\r\n\t\tif (!(key && key instanceof String)) throw Error('Key is required')\r\n\t\tawait this.#database.put(key, value)\r\n\t}\r\n\r\n\tasync delete(key) {\r\n\t\tif (!(key && key instanceof String)) throw Error('Key is required')\r\n\t\tawait this.#database.delete(key)\r\n\t}\r\n}\r\n\r\n// eslint-disable-next-line import/prefer-default-export\r\nexport const getKeyValue = async (address, orbitdb = globalThis.orbitdb) => {\r\n\tif (!orbitdb) throw Error('OrbitDB is not initialized')\r\n\tconst isValid = await isValidDatabase(address)\r\n\tif (!isValid) throw Error('Invalid database address')\r\n\r\n\tconst database = await orbitdb.keyvalue(address)\r\n\tawait database.load()\r\n\treturn new KVDatabase(database)\r\n}\r\n","import { Counter, DocStore, EventLog, Feed, KeyValue } from './wrappers'\r\n\r\nconst peerDBServer = 'https://pinning.three0dev.com/'\r\n\r\nconst cacheMap = new Map()\r\n\r\nasync function getDB(address, type, options = {}) {\r\n\tlet db = cacheMap.get(address)\r\n\tif (db) return db\r\n\r\n\tcacheMap.set(address, db)\r\n\ttry {\r\n\t\tswitch (type) {\r\n\t\t\tcase 'counter':\r\n\t\t\t\tdb = await Counter.getCounter(address)\r\n\t\t\t\tbreak\r\n\t\t\tcase 'docstore':\r\n\t\t\t\tdb = await DocStore.getDocStore(address, options)\r\n\t\t\t\tbreak\r\n\t\t\tcase 'eventlog':\r\n\t\t\t\tdb = await EventLog.getEventLog(address)\r\n\t\t\t\tbreak\r\n\t\t\tcase 'feed':\r\n\t\t\t\tdb = await Feed.getFeed(address)\r\n\t\t\t\tbreak\r\n\t\t\tcase 'keyvalue':\r\n\t\t\t\tdb = await KeyValue.getKeyValue(address)\r\n\t\t\t\tbreak\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Unknown database type: ${type}`)\r\n\t\t}\r\n\r\n\t\tcacheMap.set(address, db)\r\n\r\n\t\tawait fetch(`${peerDBServer}pin/?address=${address}`, {\r\n\t\t\tmethod: 'POST',\r\n\t\t\tmode: 'cors',\r\n\t\t\tcache: 'no-cache',\r\n\t\t\tcredentials: 'same-origin', // include, *same-origin, omit\r\n\t\t\tredirect: 'follow',\r\n\t\t\treferrerPolicy: 'no-referrer',\r\n\t\t})\r\n\t} catch (e) {\r\n\t\tconsole.error(e)\r\n\t}\r\n\r\n\treturn db\r\n}\r\n\r\nexport async function getCounter(address) {\r\n\treturn getDB(address, 'counter')\r\n}\r\n\r\nexport async function getDocStore(address, options = { indexBy: '_id' }) {\r\n\treturn getDB(address, 'docstore', options)\r\n}\r\n\r\nexport async function getEventLog(address) {\r\n\treturn getDB(address, 'eventlog')\r\n}\r\n\r\nexport async function getFeed(address) {\r\n\treturn getDB(address, 'feed')\r\n}\r\n\r\nexport async function getKeyValue(address) {\r\n\treturn getDB(address, 'keyvalue')\r\n}\r\n\r\nexport function timestamp() {\r\n\treturn Date.now()\r\n}\r\n","import * as Counter from './counter'\r\nimport * as DocStore from './docstore'\r\nimport * as EventLog from './eventlog'\r\nimport * as Feed from './feed'\r\nimport * as KeyValue from './keyvalue'\r\n\r\nexport { Counter, DocStore, EventLog, Feed, KeyValue }\r\n"],"names":["CounterDatabase","Database","constructor","database","get","value","inc","amt","Number","Error","incrementPromises","i","push","Promise","all","getCounter","address","orbitdb","globalThis","isValid","isValidDatabase","counter","load","OrbitDB","isValidAddress","isProjectDatabase","contract","valid_database","isValidKey","key","isValidValueObject","Object","onChange","callbackfn","events","on","DocumentDatabase","where","e","query","set","put","_id","add","id","uuidv4","delete","del","update","doc","getDocStore","indexBy","docs","EventLogDatabase","instance","String","getAll","getEventLog","FeedDatabase","map","payload","getFeed","KVDatabase","getKeyValue","keyvalue","peerDBServer","cacheMap","Map","getDB","type","options","db","Counter","DocStore","EventLog","Feed","KeyValue","fetch","method","mode","cache","credentials","redirect","referrerPolicy","console","error","timestamp","Date","now"],"version":3,"file":"index.js.map"}