{"mappings":";;;;;;;;;;;;;;;;;;;;;A;AMAA,IAAkB,yCAEjB,AAFD;AAAA,CAAA,SAAkB,iBAAiB,EAAnC;IACC,iBAAA,CAAA,cAAA,CAAA,GAAA,cAA6B,CAAA;CAC7B,CAAA,CAFiB,yCAAiB,IAAjB,CAAA,yCAAiB,GAAA,EAAA,CAAA,AAAA,CAAA,CAElC;AAEK,SAAU,yCAAiB,GAAjC;IACC,OAAQ,UAAU,CAAC,aAAa,CAAC,SAAS;QACzC,KAAK,yCAAiB,CAAC,YAAY;YAClC,OAAO,SAAS,CAAA;QACjB;YACC,MAAM,KAAK,CACV,CAAA,wBAAA,EAA2B,UAAU,CAAC,aAAa,CAAC,SAAS,CAAA,CAAA,CAAG,CAChE,CAAA;KACF;CACD;AAEK,SAAU,yCAAc,GAA9B;IACC,iDAAiD;IACjD,OAAO,IAAI,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAA;CAC3C;;;A,I,+B,G,a,U,S,I,S,O,E,U,E,C,E,S,E;I,S,K,C,K,E;Q,O,K,Y,C,G,K,G,I,C,C,S,O,E;Y,O,C,K,C,C;S,C,C;K;I,O,I,C,C,I,C,C,G,O,C,A,C,C,S,O,E,M,E;Q,S,S,C,K,E;Y,I;gB,I,C,S,C,I,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,Q,C,K,E;Y,I;gB,I,C,S,C,O,C,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,I,C,M,E;Y,M,C,I,G,O,C,M,C,K,C,G,K,C,M,C,K,C,C,I,C,S,E,Q,C,C;S;Q,I,C,A,C,S,G,S,C,K,C,O,E,U,I,E,C,C,C,I,E,C,C;K,C,C;C,A;AFkBD,IAAY,yCAGX,AAHD;AAAA,CAAA,SAAY,cAAc,EAA1B;IACC,cAAA,CAAA,OAAA,CAAA,GAAA,OAAe,CAAA;IACf,cAAA,CAAA,QAAA,CAAA,GAAA,QAAiB,CAAA;CACjB,CAAA,CAHW,yCAAc,IAAd,CAAA,yCAAc,GAAA,EAAA,CAAA,AAAA,CAAA,CAGzB;AAsCK,SAAU,yCAAa,GAA7B;IACC,MAAM,aAAa,GAAG,UAAU,CAAC,aAAa,CAAC,YAAY,AAAA;IAC3D,MAAM,SAAS,GAAG,CAAA,GAAA,yCAAiB,CAAA,EAAE,AAAA;IAErC,OAAQ,SAAS;QAChB,KAAK,SAAS;YACb,OAAO;gBACN,SAAS,EAAE,SAAS;gBACpB,OAAO,EAAE,8BAA8B;gBACvC,YAAY,EAAE,aAAa;gBAC3B,SAAS,EAAE,yBAAyB;gBACpC,SAAS,EAAE,iCAAiC;gBAC5C,WAAW,EAAE,mCAAmC;aAChD,CAAA;QACF,KAAK,YAAY,CAAC;QAClB,KAAK,aAAa,CAAC;QACnB,KAAK,SAAS;YACb,OAAO;gBACN,SAAS,EAAE,SAAS;gBACpB,OAAO,EAAE,8BAA8B;gBACvC,YAAY,EAAE,aAAa;gBAC3B,SAAS,EAAE,iCAAiC;gBAC5C,SAAS,EAAE,iCAAiC;gBAC5C,WAAW,EAAE,mCAAmC;aAChD,CAAA;QACF,KAAK,SAAS;YACb,OAAO;gBACN,SAAS,EAAE,SAAS;gBACpB,OAAO,EAAE,8BAA8B;gBACvC,YAAY,EAAE,aAAa;gBAC3B,SAAS,EAAE,iCAAiC;gBAC5C,SAAS,EAAE,iCAAiC;gBAC5C,WAAW,EAAE,mCAAmC;aAChD,CAAA;QACF,KAAK,OAAO;YACX,OAAO;gBACN,SAAS,EAAE,OAAO;gBAClB,OAAO,EAAE,uBAAuB;gBAChC,OAAO,EAAE,CAAA,iBAAmB,yBAAA,CAA2B;gBACvD,SAAS,EAAE,8BAA8B;gBACzC,YAAY,EAAE,aAAa;aAC3B,CAAA;QACF,KAAK,MAAM,CAAC;QACZ,KAAK,IAAI;YACR,OAAO;gBACN,SAAS,EAAE,aAAa;gBACxB,OAAO,EAAE,iCAAiC;gBAC1C,YAAY,EAAE,aAAa;gBAC3B,aAAa,EAAE,WAAW;aAC1B,CAAA;QACF,KAAK,YAAY;YAChB,OAAO;gBACN,SAAS,EAAE,qBAAqB;gBAChC,OAAO,EAAE,iCAAiC;gBAC1C,YAAY,EAAE,aAAa;gBAC3B,aAAa,EAAE,WAAW;aAC1B,CAAA;QACF;YACC,MAAM,KAAK,CACV,CAAA,0BAAA,EAA6B,SAAS,CAAA,sCAAA,CAAwC,CAC9E,CAAA;KACF;CACD;AAGK,SAAgB,yCAAI,GAA1B;I,O,+B,C,I,E,K,C,E,K,C,E,Y;QACC,MAAM,UAAU,GAAG,yCAAa,EAAE,AAAA;QAElC,4CAA4C;QAC5C,MAAM,IAAI,GAAG,MAAM,CAAA,GAAA,cAAO,CAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA;YACzB,QAAQ,EAAE,IAAI,CAAA,GAAA,gBAAS,CAAA,CAAC,2BAA2B,EAAE;SAAA,EAClD,UAAU,CAAA,EAAA;YACb,OAAO,EAAE,EAAE;SAAA,CAAA,CACV,AAAA;QAEF,+EAA+E;QAC/E,+CAA+C;QAC/C,UAAU,CAAC,gBAAgB,GAAG,IAAI,CAAA,GAAA,uBAAgB,CAAA,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;QAE9D,oEAAoE;QACpE,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAA,GAAA,eAAQ,CAAA,CACjC,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,EACrC,UAAU,CAAC,YAAY,EACvB;YACC,0FAA0F;YAC1F,WAAW,EAAE;gBACZ,UAAU;gBACV,gBAAgB;gBAChB,aAAa;gBACb,kBAAkB;aAClB;YACD,6FAA6F;YAC7F,aAAa,EAAE;gBAAC,aAAa;aAAC;SAC9B,CACD,CAAA;KACD,CAAD,CAAA;CAAC;;AH5KD;;A;;;;A;ASAM,SAAU,yCAAU,GAA1B;IACC,OAAO,UAAU,CAAC,gBAAgB,CAAC,UAAU,EAAE,CAAA;CAC/C;AAEK,SAAU,yCAAY,GAA5B;IACC,OAAO,UAAU,CAAC,gBAAgB,CAAC,YAAY,EAAE,CAAA;CACjD;;;A,I,+B,G,a,U,S,I,S,O,E,U,E,C,E,S,E;I,S,K,C,K,E;Q,O,K,Y,C,G,K,G,I,C,C,S,O,E;Y,O,C,K,C,C;S,C,C;K;I,O,I,C,C,I,C,C,G,O,C,A,C,C,S,O,E,M,E;Q,S,S,C,K,E;Y,I;gB,I,C,S,C,I,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,Q,C,K,E;Y,I;gB,I,C,S,C,O,C,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,I,C,M,E;Y,M,C,I,G,O,C,M,C,K,C,G,K,C,M,C,K,C,C,I,C,S,E,Q,C,C;S;Q,I,C,A,C,S,G,S,C,K,C,O,E,U,I,E,C,C,C,I,E,C,C;K,C,C;C,A;AFHa,oDAAd;I,O,+B,C,I,E,K,C,E,K,C,E,Y;QACC,IAAI,CAAC,CAAA,GAAA,yCAAiB,CAAA,EAAE,EAAE,OAAM;QAEhC,IAAI,UAAU,GAAG,IAAI,AAAA;QAErB,IAAI;YACH,MAAM,IAAI,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC;gBAC/C,UAAU,EAAE,CAAA,GAAA,yCAAY,CAAA,EAAE;aAC1B,CAAC,AAAA;YACF,UAAU,GAAG,IAAI,CAAC,SAAS,CAAA;SAC3B,CAAC,OAAO,CAAC,EAAE;YACX,UAAU,GAAG,KAAK,CAAA;YAClB,MAAM,CAAC,CAAA;SACP;QAED,IAAI,CAAC,UAAU,EACd,MAAM,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC;YACrC,MAAM,EAAE,CAAA,GAAA,wCAAc,CAAA,CAAC,KAAK;SAC5B,CAAC,CAAA;KAEH,CAAD,CAAA;CAAC;;;;;;A;;;;A;A,I,+B,G,a,U,S,I,S,O,E,U,E,C,E,S,E;I,S,K,C,K,E;Q,O,K,Y,C,G,K,G,I,C,C,S,O,E;Y,O,C,K,C,C;S,C,C;K;I,O,I,C,C,I,C,C,G,O,C,A,C,C,S,O,E,M,E;Q,S,S,C,K,E;Y,I;gB,I,C,S,C,I,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,Q,C,K,E;Y,I;gB,I,C,S,C,O,C,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,I,C,M,E;Y,M,C,I,G,O,C,M,C,K,C,G,K,C,M,C,K,C,C,I,C,S,E,Q,C,C;S;Q,I,C,A,C,S,G,S,C,K,C,O,E,U,I,E,C,C,C,I,E,C,C;K,C,C;C,A;APpBD,IAAI,0BAAe,AAAA;AAEnB,MAAM,iCAAW,GAAgB;IAChC,KAAK,EAAE,IAAI;IACX,YAAY,EAAE;QACb,UAAU,EAAE,IAAI;KAChB;IACD,OAAO,EAAE;QACR,OAAO,EAAE,KAAK;KACd;IACD,MAAM,EAAE;QACP,SAAS,EAAE;YACV,KAAK,EAAE;gBACN,kEAAkE;aAElE;SACD;KACD;CACD,AAAA;AAED,MAAM,8BAAQ,GAAG,IAAjB,+BAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;QACC,0BAAI,GAAG,0BAAI,IAAK,CAAA,MAAM,aAAW,CAAC,iCAAW,CAAC,CAAA,AAAC,CAAA;QAC/C,OAAO,0BAAI,CAAA;KACX,CAAA,AAAA;IAED,wCAAuB,GAAR,8BAAQ;;;;;;;A;A,I,+B,G,a,U,S,I,S,O,E,U,E,C,E,S,E;I,S,K,C,K,E;Q,O,K,Y,C,G,K,G,I,C,C,S,O,E;Y,O,C,K,C,C;S,C,C;K;I,O,I,C,C,I,C,C,G,O,C,A,C,C,S,O,E,M,E;Q,S,S,C,K,E;Y,I;gB,I,C,S,C,I,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,Q,C,K,E;Y,I;gB,I,C,S,C,O,C,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,I,C,M,E;Y,M,C,I,G,O,C,M,C,K,C,G,K,C,M,C,K,C,C,I,C,S,E,Q,C,C;S;Q,I,C,A,C,S,G,S,C,K,C,O,E,U,I,E,C,C,C,I,E,C,C;K,C,C;C,A;Ac1BjB,SAAgB,yCAAM,GAA5B;I,O,+B,C,I,E,K,C,E,K,C,E,Y;QACC,MAAM,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC;YACrC,MAAM,EAAE,CAAA,GAAA,wCAAc,CAAA,CAAC,MAAM;SAC7B,CAAC,CAAA;QACF,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAA;KACrC,CAAD,CAAA;CAAC;AAEK,SAAgB,yCAAK,CAAC,UAAmB,EAAE,UAAmB,EAApE;I,O,+B,C,I,E,K,C,E,K,C,E,Y;QACC,UAAU,CAAC,gBAAgB,CAAC,aAAa,CAAC;YACzC,UAAU,EAAE,UAAU,CAAC,aAAa,CAAC,YAAY;wBACjD,UAAU;wBACV,UAAU;SACV,CAAC,CAAA;KACF,CAAD,CAAA;CAAC;;AdfD;;;;A,I,+B,G,a,U,S,I,S,O,E,U,E,C,E,S,E;I,S,K,C,K,E;Q,O,K,Y,C,G,K,G,I,C,C,S,O,E;Y,O,C,K,C,C;S,C,C;K;I,O,I,C,C,I,C,C,G,O,C,A,C,C,S,O,E,M,E;Q,S,S,C,K,E;Y,I;gB,I,C,S,C,I,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,Q,C,K,E;Y,I;gB,I,C,S,C,O,C,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,I,C,M,E;Y,M,C,I,G,O,C,M,C,K,C,G,K,C,M,C,K,C,C,I,C,S,E,Q,C,C;S;Q,I,C,A,C,S,G,S,C,K,C,O,E,U,I,E,C,C,C,I,E,C,C;K,C,C;C,A;AOMA,gBAAgB;AAChB,MAAM,iCAAW,GAAG,IAApB,+BAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;QACC,IAAI,UAAU,CAAC,OAAO,EAAE,OAAM;QAE9B,MAAM,IAAI,GAAG,MAAM,CAAA,GAAA,iCAAQ,CAAA,EAAE,AAAA;QAC7B,MAAM,QAAQ,GAAG,CAAA,GAAA,yCAAU,CAAA,EAAE,AAAA;QAE7B,IAAI,QAAQ,EACX;YAAA,IAAI,UAAU,CAAC,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,EACtD,8DAA8D;YAC9D,oFAAoF;YACpF,kEAAkE;YAClE,UAAU,CAAC,OAAO,GAAG,MAAM,CAAA,GAAA,cAAO,CAAA,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;SACvD,MAED,UAAU,CAAC,OAAO,GAAG,MAAM,CAAA,GAAA,cAAO,CAAA,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;KAExD,CAAA,AAAA;IAED,wCAA0B,GAAX,iCAAW;;;;;;A;A,I,+B,G,a,U,S,I,S,O,E,U,E,C,E,S,E;I,S,K,C,K,E;Q,O,K,Y,C,G,K,G,I,C,C,S,O,E;Y,O,C,K,C,C;S,C,C;K;I,O,I,C,C,I,C,C,G,O,C,A,C,C,S,O,E,M,E;Q,S,S,C,K,E;Y,I;gB,I,C,S,C,I,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,Q,C,K,E;Y,I;gB,I,C,S,C,O,C,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,I,C,M,E;Y,M,C,I,G,O,C,M,C,K,C,G,K,C,M,C,K,C,C,I,C,S,E,Q,C,C;S;Q,I,C,A,C,S,G,S,C,K,C,O,E,U,I,E,C,C,C,I,E,C,C;K,C,C;C,A;AAvBZ,oDAAd;I,O,+B,C,I,E,K,C,E,K,C,E,Y;QACC,IAAI;YACH,MAAM,cAAc,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,WAAW,EAAE,AAAA;YAC9D,UAAU,CAAC,eAAe,GAAG,IAAI,CAAA,GAAA,eAAQ,CAAA,CACxC,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,EACrC,cAAc,EACd;gBACC,0FAA0F;gBAC1F,WAAW,EAAE;oBAAC,YAAY;oBAAE,UAAU;iBAAC;gBACvC,6FAA6F;gBAC7F,aAAa,EAAE;oBAAC,UAAU;iBAAC;aAC3B,CACD,CAAA;SACD,CAAC,OAAO,CAAC,EAAE;QACX,4CAA4C;SAC5C;KACD,CAAD,CAAA;CAAC;;;;;;A;A,I,+B,G,a,U,S,I,S,O,E,U,E,C,E,S,E;I,S,K,C,K,E;Q,O,K,Y,C,G,K,G,I,C,C,S,O,E;Y,O,C,K,C,C;S,C,C;K;I,O,I,C,C,I,C,C,G,O,C,A,C,C,S,O,E,M,E;Q,S,S,C,K,E;Y,I;gB,I,C,S,C,I,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,Q,C,K,E;Y,I;gB,I,C,S,C,O,C,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,I,C,M,E;Y,M,C,I,G,O,C,M,C,K,C,G,K,C,M,C,K,C,C,I,C,S,E,Q,C,C;S;Q,I,C,A,C,S,G,S,C,K,C,O,E,U,I,E,C,C,C,I,E,C,C;K,C,C;C,A;AAhBa,oDAAd;I,O,+B,C,I,E,K,C,E,K,C,E,Y;QACC,IAAI;YACH,MAAM,YAAY,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,gBAAgB,EAAE,AAAA;YACjE,UAAU,CAAC,aAAa,GAAG,IAAI,CAAA,GAAA,eAAQ,CAAA,CACtC,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,EACrC,YAAY,EACZ;gBACC,0FAA0F;gBAC1F,WAAW,EAAE;oBAAC,aAAa;oBAAE,eAAe;oBAAE,oBAAoB;iBAAC;gBACnE,6FAA6F;gBAC7F,aAAa,EAAE;oBAAC,iBAAiB;oBAAE,aAAa;oBAAE,SAAS;iBAAC;aAC5D,CACD,CAAA;SACD,CAAC,OAAO,CAAC,EAAE;YACX,OAAO,CAAC,GAAG,CAAC,wBAAwB,EAAE,CAAC,CAAC,CAAA;SACxC;KACD,CAAD,CAAA;CAAC;;;;;;;;;;;;;;;;AehBa,MAAO,wCAAQ;IAO5B,QAAQ,CAAC,UAAoB,EAA7B;QACC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,YAAY,EAAE,IAAM,UAAU,EAAE,CAAC,CAAA;KACzD;IAND,YAAY,QAAe,CAA3B;QACC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;KACxB;CAKD;;A;A,I,+B,G,a,U,S,I,S,O,E,U,E,C,E,S,E;I,S,K,C,K,E;Q,O,K,Y,C,G,K,G,I,C,C,S,O,E;Y,O,C,K,C,C;S,C,C;K;I,O,I,C,C,I,C,C,G,O,C,A,C,C,S,O,E,M,E;Q,S,S,C,K,E;Y,I;gB,I,C,S,C,I,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,Q,C,K,E;Y,I;gB,I,C,S,C,O,C,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,I,C,M,E;Y,M,C,I,G,O,C,M,C,K,C,G,K,C,M,C,K,C,C,I,C,S,E,Q,C,C;S;Q,I,C,A,C,S,G,S,C,K,C,O,E,U,I,E,C,C,C,I,E,C,C;K,C,C;C,A;AFTK,MAAO,yCAAgB,SAAQ,CAAA,GAAA,wCAAQ,CAAA;IAC5C,GAAG,GAAH;QACC,OAAQ,IAAI,CAAC,QAAyB,CAAC,KAAK,CAAA;KAC5C;IAEK,GAAG,CAAC,GAAG,GAAG,CAAC,EAAX;Q,O,+B,C,I,E,K,C,E,K,C,E,Y;YACL,IAAI,GAAG,GAAG,CAAC,EAAE,MAAM,KAAK,CAAC,0BAA0B,CAAC,CAAA;YAEpD,MAAO,IAAI,CAAC,QAAyB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;SAC9C,CAAD,CAAA;KAAC;CACD;AAED,MAAM,gCAAU,GAAG,CAAO,OAAe,GAAzC,+BAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;QACC,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,AAAA;QAC1D,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;QACrB,OAAO,IAAI,yCAAe,CAAC,QAAQ,CAAC,CAAA;KACpC,CAAA,AAAA;IAED,wCAAyB,GAAV,gCAAU;;ApBrBzB;;;;;A;;;;;;A;A,I,+B,G,a,U,S,I,S,O,E,U,E,C,E,S,E;I,S,K,C,K,E;Q,O,K,Y,C,G,K,G,I,C,C,S,O,E;Y,O,C,K,C,C;S,C,C;K;I,O,I,C,C,I,C,C,G,O,C,A,C,C,S,O,E,M,E;Q,S,S,C,K,E;Y,I;gB,I,C,S,C,I,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,Q,C,K,E;Y,I;gB,I,C,S,C,O,C,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,I,C,M,E;Y,M,C,I,G,O,C,M,C,K,C,G,K,C,M,C,K,C,C,I,C,S,E,Q,C,C;S;Q,I,C,A,C,S,G,S,C,K,C,O,E,U,I,E,C,C,C,I,E,C,C;K,C,C;C,A;AKEO,MAAM,yCAAe,GAAG,CAAO,OAAe,GAArD,+BAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;QACC,IAAI,CAAC,CAAA,GAAA,cAAO,CAAA,CAAC,cAAc,CAAC,OAAO,CAAC,EACnC,OAAO,KAAK,CAAA;QAGb,IAAI;YACH,MAAM,iBAAiB,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,cAAc,CAAC;yBAClE,OAAO;aACP,CAAC,AAAA;YAEF,OAAO,iBAAiB,CAAA;SACxB,CAAC,OAAO,CAAC,EAAE;YACX,OAAO,KAAK,CAAA;SACZ;KACD,CAAA,AAAA;AAEK,SAAU,yCAAU,CAAC,GAAW,EAAtC;IACC,OAAO,CAAC,CAAC,GAAG,CAAA;CACZ;;;A,I,+B,G,a,U,S,I,S,O,E,U,E,C,E,S,E;I,S,K,C,K,E;Q,O,K,Y,C,G,K,G,I,C,C,S,O,E;Y,O,C,K,C,C;S,C,C;K;I,O,I,C,C,I,C,C,G,O,C,A,C,C,S,O,E,M,E;Q,S,S,C,K,E;Y,I;gB,I,C,S,C,I,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,Q,C,K,E;Y,I;gB,I,C,S,C,O,C,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,I,C,M,E;Y,M,C,I,G,O,C,M,C,K,C,G,K,C,M,C,K,C,C,I,C,S,E,Q,C,C;S;Q,I,C,A,C,S,G,S,C,K,C,O,E,U,I,E,C,C,C,I,E,C,C;K,C,C;C,A;AmBfK,MAAO,yCAAiB,SAAQ,CAAA,GAAA,wCAAQ,CAAA;IAC7C,GAAG,CAAC,GAAY,EAAhB;QACC,OAAO,GAAG,GACN,IAAI,CAAC,QAAkC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GACnD,IAAI,CAAC,QAAkC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;KACnD;IAED,KAAK,CAAC,UAAsC,EAA5C;QACC,OAAQ,IAAI,CAAC,QAAkC,CAAC,KAAK,CAAC,UAAU,CAAC,CAAA;KACjE;IAEK,GAAG,CAAC,GAAW,EAAE,KAAa,EAA9B;Q,O,+B,C,I,E,K,C,E,K,C,E,Y;YACL,IAAI,CAAC,CAAA,GAAA,oCAAU,CAAA,CAAC,GAAG,CAAC,EAAE,MAAM,KAAK,CAAC,iBAAiB,CAAC,CAAA;YACpD,MAAO,IAAI,CAAC,QAAkC,CAAC,GAAG,CAAA,MAAA,CAAA,MAAA,CAAA;gBAAG,GAAG,EAAE,GAAG;aAAA,EAAK,KAAK,CAAA,CAAG,CAAA;SAC1E,CAAD,CAAA;KAAC;IAEK,GAAG,CAAC,KAAa,EAAjB;Q,O,+B,C,I,E,K,C,E,K,C,E,Y;YACL,MAAM,EAAE,GAAG,CAAA,GAAA,SAAM,CAAA,EAAE,AAAA;YACnB,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,KAAK,CAAC,CAAA;YACzB,OAAO,EAAE,CAAA;SACT,CAAD,CAAA;KAAC;IAEK,MAAM,CAAC,GAAW,EAAlB;Q,O,+B,C,I,E,K,C,E,K,C,E,Y;YACL,IAAI,CAAC,CAAA,GAAA,oCAAU,CAAA,CAAC,GAAG,CAAC,EAAE,MAAM,KAAK,CAAC,iBAAiB,CAAC,CAAA;YACpD,MAAO,IAAI,CAAC,QAAkC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;SACvD,CAAD,CAAA;KAAC;IAEK,MAAM,CAAC,GAAW,EAAE,KAAa,EAAjC;Q,O,+B,C,I,E,K,C,E,K,C,E,Y;YACL,IAAI,CAAC,CAAA,GAAA,oCAAU,CAAA,CAAC,GAAG,CAAC,EAAE,MAAM,KAAK,CAAC,iBAAiB,CAAC,CAAA;YAEpD,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,AAAA;YACzB,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAO,GAAG,CAAA,EAAK,KAAK,CAAA,CAAG,CAAA;SACzC,CAAD,CAAA;KAAC;CACD;AAED,MAAM,iCAAW,GAAG,CAAO,OAAe,EAAE,OAAe,GAA3D,+BAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;QACC,MAAM,QAAQ,GAAI,MAAM,UAAU,CAAC,OAAO,CAAC,IAAI,CAC9C,OAAO,EACP,OAAO,CACP,AAA0B,AAAA;QAC3B,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;QACrB,OAAO,IAAI,yCAAgB,CAAC,QAAQ,CAAC,CAAA;KACrC,CAAA,AAAA;IAED,wCAA0B,GAAX,iCAAW;;;;;;;A;A,I,+B,G,a,U,S,I,S,O,E,U,E,C,E,S,E;I,S,K,C,K,E;Q,O,K,Y,C,G,K,G,I,C,C,S,O,E;Y,O,C,K,C,C;S,C,C;K;I,O,I,C,C,I,C,C,G,O,C,A,C,C,S,O,E,M,E;Q,S,S,C,K,E;Y,I;gB,I,C,S,C,I,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,Q,C,K,E;Y,I;gB,I,C,S,C,O,C,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,I,C,M,E;Y,M,C,I,G,O,C,M,C,K,C,G,K,C,M,C,K,C,C,I,C,S,E,Q,C,C;S;Q,I,C,A,C,S,G,S,C,K,C,O,E,U,I,E,C,C,C,I,E,C,C;K,C,C;C,A;AG9CpB,MAAO,yCAAiB,SAAQ,CAAA,GAAA,wCAAQ,CAAA;IAC7C,QAAQ,GAAR;QACC,OAAO,IAAI,CAAC,QAA2B,CAAA;KACvC;IAED,GAAG,CAAC,GAAW,EAAf;QACC,IAAI,CAAC,GAAG,EAAE,MAAM,KAAK,CAAC,iBAAiB,CAAC,CAAA;QACxC,OAAQ,IAAI,CAAC,QAA4B,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;KAClD;IAED,iCAAiC;IACjC,MAAM,GAAN;QACC,OAAQ,IAAI,CAAC,QAA4B,CAAC,GAAG,CAAA;KAC7C;IAEK,GAAG,CAAC,KAAU,EAAd;Q,O,+B,C,I,E,K,C,E,K,C,E,Y;YACL,OAAQ,IAAI,CAAC,QAA4B,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;SACpD,CAAD,CAAA;KAAC;CACD;AAED,MAAM,iCAAW,GAAG,CAAO,OAAe,GAA1C,+BAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;QACC,MAAM,KAAK,CAAC,iBAAiB,CAAC,CAAA;KAI9B,CAAA,AAAA;IAED,wCAA0B,GAAX,iCAAW;;;;;;;A;;A,I,+B,G,a,U,S,I,S,O,E,U,E,C,E,S,E;I,S,K,C,K,E;Q,O,K,Y,C,G,K,G,I,C,C,S,O,E;Y,O,C,K,C,C;S,C,C;K;I,O,I,C,C,I,C,C,G,O,C,A,C,C,S,O,E,M,E;Q,S,S,C,K,E;Y,I;gB,I,C,S,C,I,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,Q,C,K,E;Y,I;gB,I,C,S,C,O,C,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,I,C,M,E;Y,M,C,I,G,O,C,M,C,K,C,G,K,C,M,C,K,C,C,I,C,S,E,Q,C,C;S;Q,I,C,A,C,S,G,S,C,K,C,O,E,U,I,E,C,C,C,I,E,C,C;K,C,C;C,A;AE1BpB,MAAO,yCAAa,SAAQ,CAAA,GAAA,wCAAQ,CAAA;IACzC,QAAQ,GAAR;QACC,OAAO,IAAI,CAAC,QAA0B,CAAA;KACtC;IAED,GAAG,CAAC,GAAW,EAAf;QACC,IAAI,CAAC,GAAG,EAAE,MAAM,KAAK,CAAC,iBAAiB,CAAC,CAAA;QACxC,OAAQ,IAAI,CAAC,QAA2B,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,CAAA;KAC/D;IAED,GAAG,CAAC,KAAU,EAAd;QACC,OAAQ,IAAI,CAAC,QAA2B,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;KACnD;IAED,iCAAiC;IACjC,MAAM,GAAN;QACC,OAAQ,IAAI,CAAC,QAA2B,CAAC,GAAG,CAAA;KAC5C;IAEK,GAAG,CAAC,KAAU,EAAd;Q,O,+B,C,I,E,K,C,E,K,C,E,Y;YACL,OAAQ,IAAI,CAAC,QAA2B,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;SACnD,CAAD,CAAA;KAAC;CACD;AAED,MAAM,6BAAO,GAAG,CAAO,OAAe,GAAtC,+BAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;QACC,MAAM,KAAK,CAAC,iBAAiB,CAAC,CAAA;KAQ9B,CAAA,AAAA;IAED,wCAAsB,GAAP,6BAAO;;;;;;;A;A,I,+B,G,a,U,S,I,S,O,E,U,E,C,E,S,E;I,S,K,C,K,E;Q,O,K,Y,C,G,K,G,I,C,C,S,O,E;Y,O,C,K,C,C;S,C,C;K;I,O,I,C,C,I,C,C,G,O,C,A,C,C,S,O,E,M,E;Q,S,S,C,K,E;Y,I;gB,I,C,S,C,I,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,Q,C,K,E;Y,I;gB,I,C,S,C,O,C,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,I,C,M,E;Y,M,C,I,G,O,C,M,C,K,C,G,K,C,M,C,K,C,C,I,C,S,E,Q,C,C;S;Q,I,C,A,C,S,G,S,C,K,C,O,E,U,I,E,C,C,C,I,E,C,C;K,C,C;C,A;AEnChB,MAAO,wCAAW,SAAQ,CAAA,GAAA,wCAAQ,CAAA;IACvC,GAAG,CAAC,GAAW,EAAf;QACC,IAAI,CAAC,GAAG,EAAE,MAAM,KAAK,CAAC,iBAAiB,CAAC,CAAA;QACxC,OAAQ,IAAI,CAAC,QAA0C,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;KAChE;IAED,MAAM,GAAN;QACC,OAAQ,IAAI,CAAC,QAA0C,CAAC,GAAG,CAAA;KAC3D;IAEK,GAAG,CAAC,GAAW,EAAE,KAAU,EAA3B;Q,O,+B,C,I,E,K,C,E,K,C,E,Y;YACL,IAAI,CAAC,GAAG,EAAE,MAAM,KAAK,CAAC,iBAAiB,CAAC,CAAA;YACxC,MAAO,IAAI,CAAC,QAA0C,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;SACtE,CAAD,CAAA;KAAC;IAEK,MAAM,CAAC,GAAW,EAAlB;Q,O,+B,C,I,E,K,C,E,K,C,E,Y;YACL,IAAI,CAAC,GAAG,EAAE,MAAM,KAAK,CAAC,iBAAiB,CAAC,CAAA;YACxC,MAAO,IAAI,CAAC,QAA0C,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;SAC/D,CAAD,CAAA;KAAC;CACD;AAED,MAAM,iCAAW,GAAG,CAAO,OAAe,GAA1C,+BAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;QACC,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,AAAA;QAChD,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;QACrB,OAAO,IAAI,wCAAU,CAAC,QAA4B,CAAC,CAAA;KACnD,CAAA,AAAA;IAED,wCAA0B,GAAX,iCAAW;;;;A;;A,I,+B,G,a,U,S,I,S,O,E,U,E,C,E,S,E;I,S,K,C,K,E;Q,O,K,Y,C,G,K,G,I,C,C,S,O,E;Y,O,C,K,C,C;S,C,C;K;I,O,I,C,C,I,C,C,G,O,C,A,C,C,S,O,E,M,E;Q,S,S,C,K,E;Y,I;gB,I,C,S,C,I,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,Q,C,K,E;Y,I;gB,I,C,S,C,O,C,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,I,C,M,E;Y,M,C,I,G,O,C,M,C,K,C,G,K,C,M,C,K,C,C,I,C,S,E,Q,C,C;S;Q,I,C,A,C,S,G,S,C,K,C,O,E,U,I,E,C,C,C,I,E,C,C;K,C,C;C,A;A/BhB1B,MAAM,8BAAQ,GAAG,IAAI,GAAG,EAAE,AAAA;AAM1B,IAAK,kCAMJ,AAND;AAAA,CAAA,SAAK,YAAY,EAAjB;IACC,YAAA,CAAA,WAAA,CAAA,GAAA,SAAqB,CAAA;IACrB,YAAA,CAAA,YAAA,CAAA,GAAA,UAAuB,CAAA;IACvB,YAAA,CAAA,YAAA,CAAA,GAAA,UAAuB,CAAA;IACvB,YAAA,CAAA,QAAA,CAAA,GAAA,MAAe,CAAA;IACf,YAAA,CAAA,YAAA,CAAA,GAAA,UAAuB,CAAA;CACvB,CAAA,CANI,kCAAY,IAAZ,CAAA,kCAAY,GAAA,EAAA,CAAA,AAAA,CAAA,CAMhB;AAED,SAAe,2BAAK,CACnB,OAAe,EACf,IAAY,EACZ,OAAA,GAA2B,EAAE,EAH9B;I,O,+B,C,I,E,K,C,E,K,C,E,Y;QAKC,IAAI,EAAE,GAAoB,IAAI,AAAA;QAC9B,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,MAAM,KAAK,CAAC,4BAA4B,CAAC,CAAA;QAClE,MAAM,OAAO,GAAG,MAAM,CAAA,GAAA,yCAAe,CAAA,CAAC,OAAO,CAAC,AAAA;QAC9C,IAAI,CAAC,OAAO,EAAE,MAAM,KAAK,CAAC,0BAA0B,CAAC,CAAA;QAErD,IAAI,8BAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,OAAO,8BAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;QAEvD,OAAQ,IAAI;YACX,KAAK,kCAAY,CAAC,SAAS;gBAC1B,EAAE,GAAG,MAAM,CAAA,GAAA,iCAAU,CAAA,CAAC,OAAO,CAAC,CAAA;gBAC9B,MAAK;YACN,KAAK,kCAAY,CAAC,UAAU;gBAC3B,EAAE,GAAG,MAAM,CAAA,GAAA,iCAAW,CAAA,CAAC,OAAO,EAAE,OAAO,CAAC,CAAA;gBACxC,MAAK;YACN,KAAK,kCAAY,CAAC,UAAU;gBAC3B,EAAE,GAAG,MAAM,CAAA,GAAA,iCAAW,CAAA,CAAC,OAAO,CAAC,CAAA;gBAC/B,MAAK;YACN,KAAK,kCAAY,CAAC,MAAM;gBACvB,EAAE,GAAG,MAAM,CAAA,GAAA,iCAAO,CAAA,CAAC,OAAO,CAAC,CAAA;gBAC3B,MAAK;YACN,KAAK,kCAAY,CAAC,UAAU;gBAC3B,EAAE,GAAG,MAAM,CAAA,GAAA,iCAAW,CAAA,CAAC,OAAO,CAAC,CAAA;gBAC/B,MAAK;YACN;gBACC,MAAM,IAAI,KAAK,CAAC,CAAA,uBAAA,EAA0B,IAAI,CAAA,CAAE,CAAC,CAAA;SAClD;QAED,8BAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC,CAAA;QAEzB,IAAI,CAAC,EAAE,EAAE,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAA;QAC9C,OAAO,EAAE,CAAA;KACT,CAAD,CAAA;CAAC;AAEK,SAAgB,yCAAO,CAAC,OAAe,EAA7C;I,O,+B,C,I,E,K,C,E,K,C,E,Y;QACC,MAAM,EAAE,GAAG,MAAM,2BAAK,CAAC,OAAO,EAAE,kCAAY,CAAC,SAAS,CAAC,AAAA;QACvD,OAAO,EAAqB,CAAA;KAC5B,CAAD,CAAA;CAAC;AAEK,SAAgB,yCAAQ,CAC7B,OAAe,EACf,OAAA,GAA2B;IAAE,OAAO,EAAE,KAAK;CAAE,EAF9C;I,O,+B,C,I,E,K,C,E,K,C,E,Y;QAIC,MAAM,EAAE,GAAG,MAAM,2BAAK,CAAC,OAAO,EAAE,kCAAY,CAAC,UAAU,EAAE,OAAO,CAAC,AAAA;QACjE,OAAO,EAAsB,CAAA;KAC7B,CAAD,CAAA;CAAC;AAEK,SAAgB,yCAAQ,CAAC,OAAe,EAA9C;I,O,+B,C,I,E,K,C,E,K,C,E,Y;QACC,MAAM,EAAE,GAAG,MAAM,2BAAK,CAAC,OAAO,EAAE,kCAAY,CAAC,UAAU,CAAC,AAAA;QACxD,OAAO,EAAsB,CAAA;KAC7B,CAAD,CAAA;CAAC;AAEK,SAAgB,yCAAI,CAAC,OAAe,EAA1C;I,O,+B,C,I,E,K,C,E,K,C,E,Y;QACC,MAAM,EAAE,GAAG,MAAM,2BAAK,CAAC,OAAO,EAAE,kCAAY,CAAC,MAAM,CAAC,AAAA;QACpD,OAAO,EAAkB,CAAA;KACzB,CAAD,CAAA;CAAC;AAEK,SAAgB,yCAAQ,CAAC,OAAe,EAA9C;I,O,+B,C,I,E,K,C,E,K,C,E,Y;QACC,MAAM,EAAE,GAAG,MAAM,2BAAK,CAAC,OAAO,EAAE,kCAAY,CAAC,UAAU,CAAC,AAAA;QACxD,OAAO,EAAgB,CAAA;KACvB,CAAD,CAAA;CAAC;AAEK,SAAU,yCAAS,GAAzB;IACC,OAAO,IAAI,CAAC,GAAG,EAAE,CAAA;CACjB;;;;;;;;A;;A,I,+B,G,a,U,S,I,S,O,E,U,E,C,E,S,E;I,S,K,C,K,E;Q,O,K,Y,C,G,K,G,I,C,C,S,O,E;Y,O,C,K,C,C;S,C,C;K;I,O,I,C,C,I,C,C,G,O,C,A,C,C,S,O,E,M,E;Q,S,S,C,K,E;Y,I;gB,I,C,S,C,I,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,Q,C,K,E;Y,I;gB,I,C,S,C,O,C,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,I,C,M,E;Y,M,C,I,G,O,C,M,C,K,C,G,K,C,M,C,K,C,C,I,C,S,E,Q,C,C;S;Q,I,C,A,C,S,G,S,C,K,C,O,E,U,I,E,C,C,C,I,E,C,C;K,C,C;C,A;AA9FK,SAAgB,yCAAU,CAC/B,IAAU,EACV,IAAA,GAAe,EAAE,EACjB,WAAA,GAAsB,EAAE,EAHzB;I,O,+B,C,I,E,K,C,E,K,C,E,Y;QAKC,IAAI,QAAQ,GAAG,IAAI,AAAA;QACnB,IAAI,IAAI,KAAK,EAAE,EACd,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAA;aAEpB,QAAQ,GAAG,CAAA,EAAG,IAAI,CAAA,CAAA,EAAI,IAAI,CAAC,IAAI,CAAA,CAAE,CAAA;QAGlC,iBAAiB;QAEjB,iCAAiC;QACjC,MAAM,IAAI,GAAG,MAAM,CAAA,GAAA,iCAAQ,CAAA,EAAE,AAAA;QAC7B,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,AAAA;QAEzC,MAAM,YAAY,GAAG;YACpB,KAAK,EAAE,IAAI,CAAC,IAAI;yBAChB,WAAW;YACX,KAAK,EAAE,CAAA,oBAAA,EAAuB,YAAY,CAAC,IAAI,CAAA,CAAE;YACjD,UAAU,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;YACnC,SAAS,EAAE,IAAI,CAAC,IAAI;YACpB,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;SACrB,AAAA;QAED,MAAM,UAAU,CAAC,eAAe,CAAC,QAAQ,CACxC;YACC,QAAQ,EAAE,eAAc,EAAE,CAAC,WAAW,EAAE;YACxC,QAAQ,EAAE,YAAY;YACtB,IAAI,EAAE,QAAQ;YACd,WAAW,EAAE,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC,SAAS;SAC5D,EACD,iBAAiB,EACjB,0BAA0B,CAAC,2CAA2C;SACtE,CAAA;KACD,CAAD,CAAA;CAAC;AAEK,SAAgB,yCAAQ,CAAC,IAAY,EAA3C;I,O,+B,C,I,E,K,C,E,K,C,E,Y;QACC,MAAM,aAAa,GAAG,MAAM,UAAU,CAAC,eAAe,CAAC,QAAQ,CAAC;YAC/D,SAAS,EAAE,IAAI;SACf,CAAC,AAAA;QACF,OAAO,aAAa,CAAA;KACpB,CAAD,CAAA;CAAC;AAEK,SAAgB,yCAAW,CAAC,IAAY,EAA9C;I,O,+B,C,I,E,K,C,E,K,C,E,Y;QACC,0CAA0C;QAC1C,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,GAAG,GAAG,IAAI,GAAG,CAAA,EAAG,IAAI,CAAA,CAAA,CAAG,AAAA;QACzD,MAAM,IAAI,GAAG,MAAM,UAAU,CAAC,eAAe,CAAC,UAAU,CAAC;YAAE,IAAI,EAAE,MAAM;SAAE,CAAC,AAAA;QAC1E,OAAO,IAAI,CAAA;KACX,CAAD,CAAA;CAAC;;;;;;;;;A;A,I,+B,G,a,U,S,I,S,O,E,U,E,C,E,S,E;I,S,K,C,K,E;Q,O,K,Y,C,G,K,G,I,C,C,S,O,E;Y,O,C,K,C,C;S,C,C;K;I,O,I,C,C,I,C,C,G,O,C,A,C,C,S,O,E,M,E;Q,S,S,C,K,E;Y,I;gB,I,C,S,C,I,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,Q,C,K,E;Y,I;gB,I,C,S,C,O,C,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,I,C,M,E;Y,M,C,I,G,O,C,M,C,K,C,G,K,C,M,C,K,C,C,I,C,S,E,Q,C,C;S;Q,I,C,A,C,S,G,S,C,K,C,O,E,U,I,E,C,C,C,I,E,C,C;K,C,C;C,A;AApDK,SAAgB,yCAAW,GAAjC;I,O,+B,C,I,E,K,C,E,K,C,E,Y;QACC,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,aAAa,CAAC,WAAW,EAAE,AAAA;QAC7D,OAAO,QAAQ,CAAA;KACf,CAAD,CAAA;CAAC;AAEK,SAAgB,yCAAgB,GAAtC;I,O,+B,C,I,E,K,C,E,K,C,E,Y;QACC,MAAM,OAAO,GAAG,MAAM,UAAU,CAAC,aAAa,CAAC,kBAAkB,CAAC;YACjE,UAAU,EAAE,UAAU,CAAC,gBAAgB,CAAC,YAAY,EAAE;SACtD,CAAC,AAAA;QACF,OAAO,OAAO,GAAG,OAAO,CAAA;KACxB,CAAD,CAAA;CAAC;AAEK,SAAgB,wCAAY,GAAlC;I,O,+B,C,I,E,K,C,E,K,C,E,Y;QACC,MAAM,UAAU,CAAC,aAAa,CAAC,eAAe,CAAC;YAC9C,IA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","sources":["src/index.ts","index.ts","src/blockchain/index.ts","src/blockchain/NEAR.ts","NEAR.ts","src/utils.ts","utils.ts","src/auth/init.ts","init.ts","src/auth/session.ts","session.ts","src/database/init.ts","src/database/ipfs/index.ts","src/auth/index.ts","src/auth/actions.ts","actions.ts","src/storage/init.ts","src/token/init.ts","src/database/index.ts","src/database/wrappers/index.ts","src/database/wrappers/counter.ts","counter.ts","src/database/wrappers/database.ts","database.ts","src/database/wrappers/docstore.ts","docstore.ts","src/database/wrappers/utils.ts","src/database/wrappers/eventlog.ts","eventlog.ts","src/database/wrappers/feed.ts","feed.ts","src/database/wrappers/keyvalue.ts","keyvalue.ts","src/storage/index.ts","src/token/index.ts"],"sourcesContent":["import { NEAR } from './blockchain'\nimport initAuth from './auth/Init'\nimport initOrbitDB from './database/Init'\nimport initStorage from './storage/init'\nimport initToken from './token/init'\nimport { getAccountId, login, logout, isLoggedIn } from './auth'\nimport {\n\ttimestamp,\n\tCounter,\n\tKeyValue,\n\tDocStore,\n\tFeed,\n\tEventLog,\n} from './database'\nimport { uploadFile, openFile, getFileList } from './storage'\nimport {\n\tisUserRegistered,\n\tregisterUser,\n\tgetBalance,\n\ttransferTokens,\n} from './token'\nimport { ProjectConfig } from './types/config'\nimport { BlockchainNetwork } from './utils'\n\nconst init = async (projectConfig: ProjectConfig) => {\n\tglobalThis.projectConfig = projectConfig\n\n\tswitch (projectConfig.chainType) {\n\t\tcase BlockchainNetwork.NEAR_TESTNET:\n\t\t\tawait NEAR.init()\n\t\t\tbreak\n\t\tdefault:\n\t\t\tthrow Error(`Unconfigured chainType '${projectConfig.chainType}'`)\n\t}\n\n\tawait initAuth()\n\tawait initOrbitDB()\n\tawait initStorage()\n\tawait initToken()\n}\n\nconst Auth = {\n\tgetAccountId,\n\tlogin,\n\tlogout,\n\tisLoggedIn,\n}\n\nconst Database = {\n\ttimestamp,\n\tCounter,\n\tKeyValue,\n\tDocStore,\n\tFeed,\n\tEventLog,\n}\n\nconst Storage = {\n\tuploadFile,\n\topenFile,\n\tgetFileList,\n}\n\nconst Token = {\n\tisUserRegistered,\n\tregisterUser,\n\tgetBalance,\n\ttransferTokens,\n}\n\nexport { init, Auth, Database, Storage, Token }\n",null,"import * as NEAR from './NEAR'\n\nexport {\n\t// eslint-disable-next-line import/prefer-default-export\n\tNEAR,\n}\n","import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'\nimport { getBlockchainType } from '../utils'\n\nexport interface Three0Contract {\n\tvalid_database: ValidDatabaseFunction\n\tget_user: GetUserFunction\n\tuser_action: UserActionFunction\n\tget_storage: GetStorageFunction\n}\n\ntype ValidDatabaseFunction = (\n\tdatabase_id: ValidDatabaseParams\n) => Promise<boolean>\ntype GetUserFunction = (user_id: GetUserParams) => Promise<User>\ntype UserActionFunction = (action: UserActionParams) => Promise<void>\ntype GetStorageFunction = () => Promise<string>\n\ninterface User {\n\taccount_id: string\n\tis_online: boolean\n\tcreated_at: bigint\n\tlast_online: bigint\n}\n\ninterface ValidDatabaseParams {\n\taddress: string\n}\n\ninterface GetUserParams {\n\taccount_id: string\n}\n\ninterface UserActionParams {\n\taction: UserActionType\n}\n\nexport enum UserActionType {\n\tLOGIN = 'LOGIN',\n\tLOGOUT = 'LOGOUT',\n}\n\nexport interface StorageContract {\n\tlist_files: ListFilesFunction\n\tget_file: GetFileFunction\n\tnft_mint: NftMintFunction\n}\n\ntype ListFilesFunction = (params: ListFilesParams) => Promise<string[]>\ntype GetFileFunction = (params: GetFileParams) => Promise<FileMetadata>\ntype NftMintFunction = (\n\tparams: NftMintParams,\n\tattached_gas: string,\n\tattached_deposit: string\n) => Promise<void>\n\ninterface ListFilesParams {\n\tpath: string\n}\ninterface GetFileParams {\n\tfile_path: string\n}\ninterface NftMintParams {\n\ttoken_id: string\n\tmetadata: FileMetadata\n\tpath: string\n\treceiver_id: string\n}\n\nexport interface FileMetadata {\n\ttitle: string\n\tdescription: string\n\tmedia: string\n\tmedia_hash: string\n\tfile_type: string\n\tissued_at: number\n}\n\nexport function getNearConfig() {\n\tconst CONTRACT_NAME = globalThis.projectConfig.contractName\n\tconst chainType = getBlockchainType()\n\n\tswitch (chainType) {\n\t\tcase 'mainnet':\n\t\t\treturn {\n\t\t\t\tnetworkId: 'mainnet',\n\t\t\t\tnodeUrl: 'https://rpc.mainnet.near.org',\n\t\t\t\tcontractName: CONTRACT_NAME,\n\t\t\t\twalletUrl: 'https://wallet.near.org',\n\t\t\t\thelperUrl: 'https://helper.mainnet.near.org',\n\t\t\t\texplorerUrl: 'https://explorer.mainnet.near.org',\n\t\t\t}\n\t\tcase 'production':\n\t\tcase 'development':\n\t\tcase 'testnet':\n\t\t\treturn {\n\t\t\t\tnetworkId: 'testnet',\n\t\t\t\tnodeUrl: 'https://rpc.testnet.near.org',\n\t\t\t\tcontractName: CONTRACT_NAME,\n\t\t\t\twalletUrl: 'https://wallet.testnet.near.org',\n\t\t\t\thelperUrl: 'https://helper.testnet.near.org',\n\t\t\t\texplorerUrl: 'https://explorer.testnet.near.org',\n\t\t\t}\n\t\tcase 'betanet':\n\t\t\treturn {\n\t\t\t\tnetworkId: 'betanet',\n\t\t\t\tnodeUrl: 'https://rpc.betanet.near.org',\n\t\t\t\tcontractName: CONTRACT_NAME,\n\t\t\t\twalletUrl: 'https://wallet.betanet.near.org',\n\t\t\t\thelperUrl: 'https://helper.betanet.near.org',\n\t\t\t\texplorerUrl: 'https://explorer.betanet.near.org',\n\t\t\t}\n\t\tcase 'local':\n\t\t\treturn {\n\t\t\t\tnetworkId: 'local',\n\t\t\t\tnodeUrl: 'http://localhost:3030',\n\t\t\t\tkeyPath: `${process.env.HOME}/.near/validator_key.json`,\n\t\t\t\twalletUrl: 'http://localhost:4000/wallet',\n\t\t\t\tcontractName: CONTRACT_NAME,\n\t\t\t}\n\t\tcase 'test':\n\t\tcase 'ci':\n\t\t\treturn {\n\t\t\t\tnetworkId: 'shared-test',\n\t\t\t\tnodeUrl: 'https://rpc.ci-testnet.near.org',\n\t\t\t\tcontractName: CONTRACT_NAME,\n\t\t\t\tmasterAccount: 'test.near',\n\t\t\t}\n\t\tcase 'ci-betanet':\n\t\t\treturn {\n\t\t\t\tnetworkId: 'shared-test-staging',\n\t\t\t\tnodeUrl: 'https://rpc.ci-betanet.near.org',\n\t\t\t\tcontractName: CONTRACT_NAME,\n\t\t\t\tmasterAccount: 'test.near',\n\t\t\t}\n\t\tdefault:\n\t\t\tthrow Error(\n\t\t\t\t`Unconfigured environment '${chainType}'. Can be configured in src/config.js.`\n\t\t\t)\n\t}\n}\n\n// Initialize contract & set global variables\nexport async function init() {\n\tconst nearConfig = getNearConfig()\n\n\t// Initialize connection to the NEAR testnet\n\tconst near = await connect({\n\t\tkeyStore: new keyStores.BrowserLocalStorageKeyStore(),\n\t\t...nearConfig,\n\t\theaders: {},\n\t})\n\n\t// Initializing Wallet based Account. It can work with NEAR testnet wallet that\n\t// is hosted at https://wallet.testnet.near.org\n\tglobalThis.walletConnection = new WalletConnection(near, null)\n\n\t// Initializing our contract APIs by contract name and configuration\n\tglobalThis.contract = new Contract(\n\t\tglobalThis.walletConnection.account(),\n\t\tnearConfig.contractName,\n\t\t{\n\t\t\t// View methods are read only. They don't modify the state, but usually return some value.\n\t\t\tviewMethods: [\n\t\t\t\t'get_user',\n\t\t\t\t'valid_database',\n\t\t\t\t'get_storage',\n\t\t\t\t'get_tokenization',\n\t\t\t],\n\t\t\t// Change methods can modify the state. But you don't receive the returned value when called.\n\t\t\tchangeMethods: ['user_action'],\n\t\t}\n\t)\n}\n",null,"export const enum BlockchainNetwork {\n\tNEAR_TESTNET = 'NEAR_TESTNET',\n}\n\nexport function getBlockchainType() {\n\tswitch (globalThis.projectConfig.chainType) {\n\t\tcase BlockchainNetwork.NEAR_TESTNET:\n\t\t\treturn 'testnet'\n\t\tdefault:\n\t\t\tthrow Error(\n\t\t\t\t`Unconfigured chainType '${globalThis.projectConfig.chainType}'`\n\t\t\t)\n\t}\n}\n\nexport function getQueryParams() {\n\t// eslint-disable-next-line no-restricted-globals\n\treturn new URLSearchParams(location.search)\n}\n",null,"import { UserActionType } from '../blockchain/NEAR'\nimport { isLoggedIn as isLoggedInLocally, getAccountId } from './Session'\n\nexport default async function initAuth() {\n\tif (!isLoggedInLocally()) return\n\n\tlet isLoggedIn = true\n\n\ttry {\n\t\tconst user = await globalThis.contract.get_user({\n\t\t\taccount_id: getAccountId(),\n\t\t})\n\t\tisLoggedIn = user.is_online\n\t} catch (e) {\n\t\tisLoggedIn = false\n\t\tthrow e\n\t}\n\n\tif (!isLoggedIn) {\n\t\tawait globalThis.contract.user_action({\n\t\t\taction: UserActionType.LOGIN,\n\t\t})\n\t}\n}\n",null,"export function isLoggedIn(): boolean {\n\treturn globalThis.walletConnection.isSignedIn()\n}\n\nexport function getAccountId(): string {\n\treturn globalThis.walletConnection.getAccountId()\n}\n",null,"// import IdentityProvider from 'orbit-db-identity-provider';\nimport OrbitDB from 'orbit-db'\nimport initIPFS from './ipfs'\n// import NearIdentityProvider from './identities/NEAR';\nimport { isLoggedIn } from '../auth'\n\n// Start OrbitDB\nconst initOrbitDB = async () => {\n\tif (globalThis.orbitdb) return\n\n\tconst ipfs = await initIPFS()\n\tconst loggedIn = isLoggedIn()\n\n\tif (loggedIn) {\n\t\tif (globalThis.projectConfig.chainType.includes('NEAR')) {\n\t\t\t// IdentityProvider.addIdentityProvider(NearIdentityProvider);\n\t\t\t// const identity = await IdentityProvider.createIdentity({ type: 'NearIdentity' });\n\t\t\t// const orbitdb = await OrbitDB.createInstance(ipfs, {identity});\n\t\t\tglobalThis.orbitdb = await OrbitDB.createInstance(ipfs)\n\t\t}\n\t} else {\n\t\tglobalThis.orbitdb = await OrbitDB.createInstance(ipfs)\n\t}\n}\n\nexport default initOrbitDB\n","import * as IPFS from 'ipfs-core'\nimport { IPFSOptions } from 'ipfs-core/src/components/network'\n\nlet ipfs: IPFS.IPFS\n\nconst IPFS_CONFIG: IPFSOptions = {\n\tstart: true,\n\tEXPERIMENTAL: {\n\t\tipnsPubsub: true,\n\t},\n\tpreload: {\n\t\tenabled: false,\n\t},\n\tconfig: {\n\t\tAddresses: {\n\t\t\tSwarm: [\n\t\t\t\t'/dns4/three0-rtc-node.herokuapp.com/tcp/443/wss/p2p-webrtc-star/',\n\t\t\t\t// '/dns4/p2p-circuit-constellation.herokuapp.com/tcp/443/wss/p2p/QmY8XpuX6VnaUVDz4uA14vpjv3CZYLif3wLPqCkgU2KLSB',\n\t\t\t],\n\t\t},\n\t},\n}\n\nconst initIPFS = async (): Promise<IPFS.IPFS> => {\n\tipfs = ipfs || (await IPFS.create(IPFS_CONFIG))\n\treturn ipfs\n}\n\nexport default initIPFS\n","import { login, logout } from './Actions'\nimport { getAccountId, isLoggedIn } from './Session'\n\nexport { login, logout, getAccountId, isLoggedIn }\n","import { UserActionType } from '../blockchain/NEAR'\n\nexport async function logout() {\n\tawait globalThis.contract.user_action({\n\t\taction: UserActionType.LOGOUT,\n\t})\n\tglobalThis.walletConnection.signOut()\n}\n\nexport async function login(successUrl?: string, failureUrl?: string) {\n\tglobalThis.walletConnection.requestSignIn({\n\t\tcontractId: globalThis.projectConfig.contractName,\n\t\tsuccessUrl,\n\t\tfailureUrl,\n\t})\n}\n",null,"import { Contract } from 'near-api-js'\n\nexport default async function initStorage() {\n\ttry {\n\t\tconst storageAccount = await globalThis.contract.get_storage()\n\t\tglobalThis.storageContract = new Contract(\n\t\t\tglobalThis.walletConnection.account(),\n\t\t\tstorageAccount,\n\t\t\t{\n\t\t\t\t// View methods are read only. They don't modify the state, but usually return some value.\n\t\t\t\tviewMethods: ['list_files', 'get_file'],\n\t\t\t\t// Change methods can modify the state. But you don't receive the returned value when called.\n\t\t\t\tchangeMethods: ['nft_mint'],\n\t\t\t}\n\t\t)\n\t} catch (e) {\n\t\t// console.log('Error starting storage:', e)\n\t}\n}\n","import { Contract } from 'near-api-js'\n\nexport default async function initToken() {\n\ttry {\n\t\tconst tokenAccount = await globalThis.contract.get_tokenization()\n\t\tglobalThis.tokenContract = new Contract(\n\t\t\tglobalThis.walletConnection.account(),\n\t\t\ttokenAccount,\n\t\t\t{\n\t\t\t\t// View methods are read only. They don't modify the state, but usually return some value.\n\t\t\t\tviewMethods: ['ft_metadata', 'ft_balance_of', 'storage_balance_of'],\n\t\t\t\t// Change methods can modify the state. But you don't receive the returned value when called.\n\t\t\t\tchangeMethods: ['storage_deposit', 'ft_transfer', 'ft_mint'],\n\t\t\t}\n\t\t)\n\t} catch (e) {\n\t\tconsole.log('Error starting tokens:', e)\n\t}\n}\n","import {\n\tgetCounter,\n\tgetDocStore,\n\tgetEventLog,\n\tgetFeed,\n\tgetKeyValue,\n\tCounterDatabase,\n\tDocumentDatabase,\n\tEventLogDatabase,\n\tFeedDatabase,\n\tKVDatabase,\n} from './wrappers'\nimport Database from './wrappers/Database'\nimport { isValidDatabase } from './wrappers/Utils'\n\nconst cacheMap = new Map()\n\ntype DocStoreOptions = {\n\tindexBy?: string\n}\n\nenum DatabaseType {\n\tCounterDB = 'counter',\n\tDocStoreDB = 'docstore',\n\tEventLogDB = 'eventlog',\n\tFeedDB = 'feed',\n\tKeyValueDB = 'keyvalue',\n}\n\nasync function getDB(\n\taddress: string,\n\ttype: string,\n\toptions: DocStoreOptions = {}\n): Promise<Database> {\n\tlet db: Database | null = null\n\tif (!globalThis.orbitdb) throw Error('OrbitDB is not initialized')\n\tconst isValid = await isValidDatabase(address)\n\tif (!isValid) throw Error('Invalid database address')\n\n\tif (cacheMap.has(address)) return cacheMap.get(address)\n\n\tswitch (type) {\n\t\tcase DatabaseType.CounterDB:\n\t\t\tdb = await getCounter(address)\n\t\t\tbreak\n\t\tcase DatabaseType.DocStoreDB:\n\t\t\tdb = await getDocStore(address, options)\n\t\t\tbreak\n\t\tcase DatabaseType.EventLogDB:\n\t\t\tdb = await getEventLog(address)\n\t\t\tbreak\n\t\tcase DatabaseType.FeedDB:\n\t\t\tdb = await getFeed(address)\n\t\t\tbreak\n\t\tcase DatabaseType.KeyValueDB:\n\t\t\tdb = await getKeyValue(address)\n\t\t\tbreak\n\t\tdefault:\n\t\t\tthrow new Error(`Unknown database type: ${type}`)\n\t}\n\n\tcacheMap.set(address, db)\n\n\tif (!db) throw new Error('Database not found')\n\treturn db\n}\n\nexport async function Counter(address: string): Promise<CounterDatabase> {\n\tconst db = await getDB(address, DatabaseType.CounterDB)\n\treturn db as CounterDatabase\n}\n\nexport async function DocStore(\n\taddress: string,\n\toptions: DocStoreOptions = { indexBy: '_id' }\n): Promise<DocumentDatabase> {\n\tconst db = await getDB(address, DatabaseType.DocStoreDB, options)\n\treturn db as DocumentDatabase\n}\n\nexport async function EventLog(address: string): Promise<EventLogDatabase> {\n\tconst db = await getDB(address, DatabaseType.EventLogDB)\n\treturn db as EventLogDatabase\n}\n\nexport async function Feed(address: string): Promise<FeedDatabase> {\n\tconst db = await getDB(address, DatabaseType.FeedDB)\n\treturn db as FeedDatabase\n}\n\nexport async function KeyValue(address: string): Promise<KVDatabase> {\n\tconst db = await getDB(address, DatabaseType.KeyValueDB)\n\treturn db as KVDatabase\n}\n\nexport function timestamp() {\n\treturn Date.now()\n}\n","import getCounter, { CounterDatabase } from './Counter'\nimport getDocStore, { DocumentDatabase } from './Docstore'\nimport getEventLog, { EventLogDatabase } from './Eventlog'\nimport getFeed, { FeedDatabase } from './feed'\nimport getKeyValue, { KVDatabase } from './Keyvalue'\n\nexport { getCounter, getDocStore, getEventLog, getFeed, getKeyValue }\nexport {\n\tCounterDatabase,\n\tDocumentDatabase,\n\tEventLogDatabase,\n\tFeedDatabase,\n\tKVDatabase,\n}\n","import CounterStore from 'orbit-db-counterstore'\nimport Database from './Database'\n\nexport class CounterDatabase extends Database {\n\tget() {\n\t\treturn (this.database as CounterStore).value\n\t}\n\n\tasync inc(amt = 1) {\n\t\tif (amt < 1) throw Error('Valid amount is required')\n\n\t\tawait (this.database as CounterStore).inc(amt)\n\t}\n}\n\nconst getCounter = async (address: string) => {\n\tconst database = await globalThis.orbitdb.counter(address)\n\tawait database.load()\n\treturn new CounterDatabase(database)\n}\n\nexport default getCounter\n",null,"import Store from 'orbit-db-store'\n\nexport default class Database {\n\tprotected readonly database: Store\n\n\tconstructor(database: Store) {\n\t\tthis.database = database\n\t}\n\n\tonChange(callbackfn: Function) {\n\t\tthis.database.events.on('replicated', () => callbackfn())\n\t}\n}\n",null,"import DocumentStore from 'orbit-db-docstore'\nimport { v4 as uuidv4 } from 'uuid'\nimport Database from './Database'\nimport { isValidKey } from './Utils'\n\nexport class DocumentDatabase extends Database {\n\tget(key?: string) {\n\t\treturn key\n\t\t\t? (this.database as DocumentStore<Object>).get(key)[0]\n\t\t\t: (this.database as DocumentStore<Object>).get('')\n\t}\n\n\twhere(callbackfn: (value: Object) => boolean): Array<Object> {\n\t\treturn (this.database as DocumentStore<Object>).query(callbackfn)\n\t}\n\n\tasync set(key: string, value: Object) {\n\t\tif (!isValidKey(key)) throw Error('Key is required')\n\t\tawait (this.database as DocumentStore<Object>).put({ _id: key, ...value })\n\t}\n\n\tasync add(value: Object) {\n\t\tconst id = uuidv4()\n\t\tawait this.set(id, value)\n\t\treturn id\n\t}\n\n\tasync delete(key: string) {\n\t\tif (!isValidKey(key)) throw Error('Key is required')\n\t\tawait (this.database as DocumentStore<Object>).del(key)\n\t}\n\n\tasync update(key: string, value: Object) {\n\t\tif (!isValidKey(key)) throw Error('Key is required')\n\n\t\tconst doc = this.get(key)\n\t\tawait this.set(key, { ...doc, ...value })\n\t}\n}\n\nconst getDocStore = async (address: string, indexBy: Object) => {\n\tconst database = (await globalThis.orbitdb.docs(\n\t\taddress,\n\t\tindexBy\n\t)) as DocumentStore<Object>\n\tawait database.load()\n\treturn new DocumentDatabase(database)\n}\n\nexport default getDocStore\n",null,"import OrbitDB from 'orbit-db'\n\nexport const isValidDatabase = async (address: string) => {\n\tif (!OrbitDB.isValidAddress(address)) {\n\t\treturn false\n\t}\n\n\ttry {\n\t\tconst isProjectDatabase = await globalThis.contract.valid_database({\n\t\t\taddress,\n\t\t})\n\n\t\treturn isProjectDatabase\n\t} catch (e) {\n\t\treturn false\n\t}\n}\n\nexport function isValidKey(key: string) {\n\treturn !!key\n}\n","import EventStore from 'orbit-db-eventstore'\nimport Database from './Database'\n\nexport class EventLogDatabase extends Database {\n\tinstance() {\n\t\treturn this.database as EventStore<any>\n\t}\n\n\tget(key: string) {\n\t\tif (!key) throw Error('Key is required')\n\t\treturn (this.database as EventStore<any>).get(key)\n\t}\n\n\t// TODO Should we implement this?\n\tgetAll() {\n\t\treturn (this.database as EventStore<any>).all\n\t}\n\n\tasync set(value: any) {\n\t\treturn (this.database as EventStore<any>).add(value)\n\t}\n}\n\nconst getEventLog = async (address: string) => {\n\tthrow Error('Not implemented')\n\n\tconst database = await orbitdb.log(address)\n\treturn new EventLogDatabase(database)\n}\n\nexport default getEventLog\n",null,"import FeedStore from 'orbit-db-feedstore'\nimport Database from './Database'\nimport { isValidDatabase } from './Utils'\n\nexport class FeedDatabase extends Database {\n\tinstance() {\n\t\treturn this.database as FeedStore<any>\n\t}\n\n\tget(key: string) {\n\t\tif (!key) throw Error('Key is required')\n\t\treturn (this.database as FeedStore<any>).get(key).payload.value\n\t}\n\n\tadd(value: any) {\n\t\treturn (this.database as FeedStore<any>).add(value)\n\t}\n\n\t// TODO Should we implement this?\n\tgetAll() {\n\t\treturn (this.database as FeedStore<any>).all\n\t}\n\n\tasync set(value: any) {\n\t\treturn (this.database as FeedStore<any>).add(value)\n\t}\n}\n\nconst getFeed = async (address: string) => {\n\tthrow Error('Not implemented')\n\n\tif (!orbitdb) throw Error('OrbitDB is not initialized')\n\tconst isValid = await isValidDatabase(address)\n\tif (!isValid) throw Error('Invalid database address')\n\n\tconst database = await orbitdb.log(address)\n\treturn new FeedDatabase(database)\n}\n\nexport default getFeed\n",null,"import KeyValueStore from 'orbit-db-kvstore'\nimport Store from 'orbit-db-store'\nimport Database from './Database'\n\nexport class KVDatabase extends Database {\n\tget(key: string) {\n\t\tif (!key) throw Error('Key is required')\n\t\treturn (this.database as unknown as KeyValueStore<any>).get(key)\n\t}\n\n\tgetAll() {\n\t\treturn (this.database as unknown as KeyValueStore<any>).all\n\t}\n\n\tasync set(key: string, value: any) {\n\t\tif (!key) throw Error('Key is required')\n\t\tawait (this.database as unknown as KeyValueStore<any>).put(key, value)\n\t}\n\n\tasync delete(key: string) {\n\t\tif (!key) throw Error('Key is required')\n\t\tawait (this.database as unknown as KeyValueStore<any>).del(key)\n\t}\n}\n\nconst getKeyValue = async (address: string) => {\n\tconst database = await orbitdb.keyvalue(address)\n\tawait database.load()\n\treturn new KVDatabase(database as unknown as Store)\n}\n\nexport default getKeyValue\n",null,"import * as short from 'short-uuid'\nimport initIPFS from '../database/ipfs'\n\nexport async function uploadFile(\n\tfile: File,\n\tpath: string = '',\n\tdescription: string = ''\n) {\n\tlet filepath = path\n\tif (path === '') {\n\t\tfilepath = file.name\n\t} else {\n\t\tfilepath = `${path}/${file.name}`\n\t}\n\n\t// Upload to IPFS\n\n\t// Put IPFS URL into NFT and mint\n\tconst ipfs = await initIPFS()\n\tconst uploadedFile = await ipfs.add(file)\n\n\tconst fileMetadata = {\n\t\ttitle: file.name,\n\t\tdescription,\n\t\tmedia: `http://ipfs.io/ipfs/${uploadedFile.path}`,\n\t\tmedia_hash: btoa(uploadedFile.path),\n\t\tfile_type: file.type,\n\t\tissued_at: Date.now(),\n\t}\n\n\tawait globalThis.storageContract.nft_mint(\n\t\t{\n\t\t\ttoken_id: short.generate().toLowerCase(),\n\t\t\tmetadata: fileMetadata,\n\t\t\tpath: filepath,\n\t\t\treceiver_id: globalThis.walletConnection.account().accountId,\n\t\t},\n\t\t'300000000000000', // attached GAS (optional)\n\t\t'100000000000000000000000' // attached deposit in yoctoNEAR (optional)\n\t)\n}\n\nexport async function openFile(path: string) {\n\tconst tokenMetaData = await globalThis.storageContract.get_file({\n\t\tfile_path: path,\n\t})\n\treturn tokenMetaData\n}\n\nexport async function getFileList(path: string) {\n\t// add slash to end of path if not present\n\tconst folder = path.slice(-1) === '/' ? path : `${path}/`\n\tconst list = await globalThis.storageContract.list_files({ path: folder })\n\treturn list\n}\n","import { utils } from 'near-api-js'\n\nexport async function getMetadata() {\n\tconst metadata = await globalThis.tokenContract.ft_metadata()\n\treturn metadata\n}\n\nexport async function isUserRegistered() {\n\tconst balance = await globalThis.tokenContract.storage_balance_of({\n\t\taccount_id: globalThis.walletConnection.getAccountId(),\n\t})\n\treturn balance > 0.00125\n}\n\nexport async function registerUser() {\n\tawait globalThis.tokenContract.storage_deposit({\n\t\targs: {\n\t\t\taccount_id: globalThis.walletConnection.getAccountId(),\n\t\t},\n\t\tamount: utils.format.parseNearAmount('0.00125'),\n\t})\n}\n\nexport async function getBalance() {\n\tconst { decimals } = await getMetadata()\n\tconst balance =\n\t\t(await globalThis.tokenContract.ft_balance_of({\n\t\t\taccount_id: globalThis.walletConnection.getAccountId(),\n\t\t})) /\n\t\t10 ** decimals\n\treturn balance\n}\n\nexport async function transferTokens(receiver: string, amount: number) {\n\tawait globalThis.tokenContract.ft_transfer({\n\t\targs: {\n\t\t\treceiver_id: receiver,\n\t\t\tamount: `${amount}`,\n\t\t},\n\t\tamount: '1',\n\t})\n}\n\n// Mint tokens for the user calling this function, amount is in fungible token units\nexport async function buyTokens(amount: number) {\n\tawait globalThis.tokenContract.ft_mint({\n\t\tamount: `${amount / 10 ** (await getMetadata()).exchange_rate}`,\n\t})\n}\n"],"names":[],"version":3,"file":"index.js.map"}