{"mappings":";;;;;;;;;;;;;;;;;;A;AMAA,IAAkB,yCAEjB,AAFD;AAAA,CAAA,SAAkB,iBAAiB,EAAnC;IACC,iBAAA,CAAA,cAAA,CAAA,GAAA,cAA6B,CAAA;CAC7B,CAAA,CAFiB,yCAAiB,IAAjB,CAAA,yCAAiB,GAAA,EAAA,CAAA,AAAA,CAAA,CAElC;AAEK,SAAU,yCAAiB,GAAjC;IACC,OAAQ,UAAU,CAAC,aAAa,CAAC,SAAS;QACzC,KAAK,yCAAiB,CAAC,YAAY;YAClC,OAAO,SAAS,CAAA;QACjB;YACC,MAAM,KAAK,CACV,CAAA,wBAAA,EAA2B,UAAU,CAAC,aAAa,CAAC,SAAS,CAAA,CAAA,CAAG,CAChE,CAAA;KACF;CACD;AAEK,SAAU,yCAAc,GAA9B;IACC,iDAAiD;IACjD,OAAO,IAAI,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAA;CAC3C;;;A,I,+B,G,a,U,S,I,S,O,E,U,E,C,E,S,E;I,S,K,C,K,E;Q,O,K,Y,C,G,K,G,I,C,C,S,O,E;Y,O,C,K,C,C;S,C,C;K;I,O,I,C,C,I,C,C,G,O,C,A,C,C,S,O,E,M,E;Q,S,S,C,K,E;Y,I;gB,I,C,S,C,I,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,Q,C,K,E;Y,I;gB,I,C,S,C,O,C,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,I,C,M,E;Y,M,C,I,G,O,C,M,C,K,C,G,K,C,M,C,K,C,C,I,C,S,E,Q,C,C;S;Q,I,C,A,C,S,G,S,C,K,C,O,E,U,I,E,C,C,C,I,E,C,C;K,C,C;C,A;AFgBD,IAAY,yCAGX,AAHD;AAAA,CAAA,SAAY,cAAc,EAA1B;IACC,cAAA,CAAA,OAAA,CAAA,GAAA,OAAe,CAAA;IACf,cAAA,CAAA,QAAA,CAAA,GAAA,QAAiB,CAAA;CACjB,CAAA,CAHW,yCAAc,IAAd,CAAA,yCAAc,GAAA,EAAA,CAAA,AAAA,CAAA,CAGzB;AAEK,SAAU,yCAAa,GAA7B;IACC,MAAM,aAAa,GAAG,UAAU,CAAC,aAAa,CAAC,YAAY,AAAA;IAC3D,MAAM,SAAS,GAAG,CAAA,GAAA,yCAAiB,CAAA,EAAE,AAAA;IAErC,OAAQ,SAAS;QAChB,KAAK,SAAS;YACb,OAAO;gBACN,SAAS,EAAE,SAAS;gBACpB,OAAO,EAAE,8BAA8B;gBACvC,YAAY,EAAE,aAAa;gBAC3B,SAAS,EAAE,yBAAyB;gBACpC,SAAS,EAAE,iCAAiC;gBAC5C,WAAW,EAAE,mCAAmC;aAChD,CAAA;QACF,KAAK,YAAY,CAAC;QAClB,KAAK,aAAa,CAAC;QACnB,KAAK,SAAS;YACb,OAAO;gBACN,SAAS,EAAE,SAAS;gBACpB,OAAO,EAAE,8BAA8B;gBACvC,YAAY,EAAE,aAAa;gBAC3B,SAAS,EAAE,iCAAiC;gBAC5C,SAAS,EAAE,iCAAiC;gBAC5C,WAAW,EAAE,mCAAmC;aAChD,CAAA;QACF,KAAK,SAAS;YACb,OAAO;gBACN,SAAS,EAAE,SAAS;gBACpB,OAAO,EAAE,8BAA8B;gBACvC,YAAY,EAAE,aAAa;gBAC3B,SAAS,EAAE,iCAAiC;gBAC5C,SAAS,EAAE,iCAAiC;gBAC5C,WAAW,EAAE,mCAAmC;aAChD,CAAA;QACF,KAAK,OAAO;YACX,OAAO;gBACN,SAAS,EAAE,OAAO;gBAClB,OAAO,EAAE,uBAAuB;gBAChC,OAAO,EAAE,CAAA,uBAAmB,yBAAA,CAA2B;gBACvD,SAAS,EAAE,8BAA8B;gBACzC,YAAY,EAAE,aAAa;aAC3B,CAAA;QACF,KAAK,MAAM,CAAC;QACZ,KAAK,IAAI;YACR,OAAO;gBACN,SAAS,EAAE,aAAa;gBACxB,OAAO,EAAE,iCAAiC;gBAC1C,YAAY,EAAE,aAAa;gBAC3B,aAAa,EAAE,WAAW;aAC1B,CAAA;QACF,KAAK,YAAY;YAChB,OAAO;gBACN,SAAS,EAAE,qBAAqB;gBAChC,OAAO,EAAE,iCAAiC;gBAC1C,YAAY,EAAE,aAAa;gBAC3B,aAAa,EAAE,WAAW;aAC1B,CAAA;QACF;YACC,MAAM,KAAK,CACV,CAAA,0BAAA,EAA6B,SAAS,CAAA,sCAAA,CAAwC,CAC9E,CAAA;KACF;CACD;AAGK,SAAgB,yCAAI,GAA1B;I,O,+B,C,I,E,K,C,E,K,C,E,Y;QACC,MAAM,UAAU,GAAG,yCAAa,EAAE,AAAA;QAElC,4CAA4C;QAC5C,MAAM,IAAI,GAAG,MAAM,CAAA,GAAA,cAAO,CAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA;YACzB,IAAI,EAAE;gBAAE,QAAQ,EAAE,IAAI,CAAA,GAAA,gBAAS,CAAA,CAAC,2BAA2B,EAAE;aAAE;SAAA,EAC5D,UAAU,CAAA,EAAA;YACb,OAAO,EAAE,EAAE;SAAA,CAAA,CACV,AAAA;QAEF,+EAA+E;QAC/E,+CAA+C;QAC/C,UAAU,CAAC,gBAAgB,GAAG,IAAI,CAAA,GAAA,uBAAgB,CAAA,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;QAE9D,oEAAoE;QACpE,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAA,GAAA,eAAQ,CAAA,CACjC,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,EACrC,UAAU,CAAC,YAAY,EACvB;YACC,0FAA0F;YAC1F,WAAW,EAAE;gBAAC,UAAU;gBAAE,gBAAgB;aAAC;YAC3C,6FAA6F;YAC7F,aAAa,EAAE;gBAAC,aAAa;aAAC;SAC9B,CACD,CAAA;KACD,CAAD,CAAA;CAAC;;AHjID;;A;;;;A;;;;A;A,I,+B,G,a,U,S,I,S,O,E,U,E,C,E,S,E;I,S,K,C,K,E;Q,O,K,Y,C,G,K,G,I,C,C,S,O,E;Y,O,C,K,C,C;S,C,C;K;I,O,I,C,C,I,C,C,G,O,C,A,C,C,S,O,E,M,E;Q,S,S,C,K,E;Y,I;gB,I,C,S,C,I,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,Q,C,K,E;Y,I;gB,I,C,S,C,O,C,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,I,C,M,E;Y,M,C,I,G,O,C,M,C,K,C,G,K,C,M,C,K,C,C,I,C,S,E,Q,C,C;S;Q,I,C,A,C,S,G,S,C,K,C,O,E,U,I,E,C,C,C,I,E,C,C;K,C,C;C,A;AAGA,IAAI,0BAAe,AAAA;AAEnB,MAAM,iCAAW,GAAgB;IAChC,KAAK,EAAE,IAAI;IACX,YAAY,EAAE;QACb,UAAU,EAAE,IAAI;KAChB;IACD,OAAO,EAAE;QACR,OAAO,EAAE,KAAK;KACd;IACD,MAAM,EAAE;QACP,SAAS,EAAE;YACV,KAAK,EAAE;gBACN,kEAAkE;aAElE;SACD;KACD;CACD,AAAA;AAED,MAAM,8BAAQ,GAAG,IAAjB,+BAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;QACC,0BAAI,GAAG,0BAAI,IAAK,CAAA,MAAM,aAAW,CAAC,iCAAW,CAAC,CAAA,AAAC,CAAA;QAC/C,OAAO,0BAAI,CAAA;KACX,CAAA,AAAA;IAED,wCAAuB,GAAR,8BAAQ;;;;;;;A;A,I,+B,G,a,U,S,I,S,O,E,U,E,C,E,S,E;I,S,K,C,K,E;Q,O,K,Y,C,G,K,G,I,C,C,S,O,E;Y,O,C,K,C,C;S,C,C;K;I,O,I,C,C,I,C,C,G,O,C,A,C,C,S,O,E,M,E;Q,S,S,C,K,E;Y,I;gB,I,C,S,C,I,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,Q,C,K,E;Y,I;gB,I,C,S,C,O,C,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,I,C,M,E;Y,M,C,I,G,O,C,M,C,K,C,G,K,C,M,C,K,C,C,I,C,S,E,Q,C,C;S;Q,I,C,A,C,S,G,S,C,K,C,O,E,U,I,E,C,C,C,I,E,C,C;K,C,C;C,A;AW1BjB,SAAgB,yCAAM,GAA5B;I,O,+B,C,I,E,K,C,E,K,C,E,Y;QACC,IAAI;YACH,MAAO,UAAU,CAAC,QAAsC,CAAC,WAAW,CAAC;gBACpE,MAAM,EAAE,CAAA,GAAA,wCAAc,CAAA,CAAC,MAAM;aAC7B,CAAC,CAAA;YACF,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAA;SACrC,CAAC,OAAO,CAAC,EAAE;YACX,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;YAChB,MAAM,CAAC,CAAA;SACP;KACD,CAAD,CAAA;CAAC;AAEK,SAAgB,yCAAK,CAC1B,OAAO,GAAG,eAAe,EACzB,UAAU,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,EACjC,UAAU,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,EAHlC;I,O,+B,C,I,E,K,C,E,K,C,E,Y;QAKC,UAAU,CAAC,gBAAgB,CAAC,aAAa,CACxC,UAAU,CAAC,aAAa,CAAC,YAAY,EACrC,OAAO,EACP,UAAU,EACV,UAAU,CACV,CAAA;KACD,CAAD,CAAA;CAAC;;AXzBD;AaAM,SAAU,yCAAU,GAA1B;IACC,OAAO,UAAU,CAAC,gBAAgB,CAAC,UAAU,EAAE,CAAA;CAC/C;AAEK,SAAU,yCAAY,GAA5B;IACC,OAAO,UAAU,CAAC,gBAAgB,CAAC,YAAY,EAAE,CAAA;CACjD;;;;;A,I,+B,G,a,U,S,I,S,O,E,U,E,C,E,S,E;I,S,K,C,K,E;Q,O,K,Y,C,G,K,G,I,C,C,S,O,E;Y,O,C,K,C,C;S,C,C;K;I,O,I,C,C,I,C,C,G,O,C,A,C,C,S,O,E,M,E;Q,S,S,C,K,E;Y,I;gB,I,C,S,C,I,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,Q,C,K,E;Y,I;gB,I,C,S,C,O,C,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,I,C,M,E;Y,M,C,I,G,O,C,M,C,K,C,G,K,C,M,C,K,C,C,I,C,S,E,Q,C,C;S;Q,I,C,A,C,S,G,S,C,K,C,O,E,U,I,E,C,C,C,I,E,C,C;K,C,C;C,A;ANAD,gBAAgB;AAChB,MAAM,iCAAW,GAAG,IAApB,+BAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;QACC,IAAI,UAAU,CAAC,OAAO,EAAE,OAAM;QAE9B,MAAM,IAAI,GAAG,MAAM,CAAA,GAAA,iCAAQ,CAAA,EAAE,AAAA;QAC7B,MAAM,QAAQ,GAAG,CAAA,GAAA,yCAAU,CAAA,EAAE,AAAA;QAE7B,IAAI,QAAQ,EACX;YAAA,IAAI,UAAU,CAAC,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,EACtD,8DAA8D;YAC9D,oFAAoF;YACpF,kEAAkE;YAClE,UAAU,CAAC,OAAO,GAAG,MAAM,CAAA,GAAA,cAAO,CAAA,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;SACvD,MAED,UAAU,CAAC,OAAO,GAAG,MAAM,CAAA,GAAA,cAAO,CAAA,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;KAExD,CAAA,AAAA;IAED,wCAA0B,GAAX,iCAAW;;;;;;A;;A,I,+B,G,a,U,S,I,S,O,E,U,E,C,E,S,E;I,S,K,C,K,E;Q,O,K,Y,C,G,K,G,I,C,C,S,O,E;Y,O,C,K,C,C;S,C,C;K;I,O,I,C,C,I,C,C,G,O,C,A,C,C,S,O,E,M,E;Q,S,S,C,K,E;Y,I;gB,I,C,S,C,I,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,Q,C,K,E;Y,I;gB,I,C,S,C,O,C,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,I,C,M,E;Y,M,C,I,G,O,C,M,C,K,C,G,K,C,M,C,K,C,C,I,C,S,E,Q,C,C;S;Q,I,C,A,C,S,G,S,C,K,C,O,E,U,I,E,C,C,C,I,E,C,C;K,C,C;C,A;AAtBZ,oDAAd;I,O,+B,C,I,E,K,C,E,K,C,E,Y;QACC,IAAI,CAAC,CAAA,GAAA,yCAAiB,CAAA,EAAE,EAAE,OAAM;QAEhC,IAAI,UAAU,GAAG,IAAI,AAAA;QAErB,IAAI;YACH,MAAM,IAAI,GAAG,MACZ,UAAU,CAAC,QACX,CAAC,QAAQ,CAAC;gBACV,UAAU,EAAE,CAAA,GAAA,yCAAY,CAAA,EAAE;aAC1B,CAAC,AAAA;YACF,UAAU,GAAG,IAAI,CAAC,SAAS,CAAA;SAC3B,CAAC,OAAO,CAAC,EAAE;YACX,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;YAChB,UAAU,GAAG,KAAK,CAAA;SAClB;QAED,IAAI,CAAC,UAAU,EACd,MAAO,UAAU,CAAC,QAAsC,CAAC,WAAW,CAAC;YACpE,MAAM,EAAE,CAAA,GAAA,wCAAc,CAAA,CAAC,KAAK;SAC5B,CAAC,CAAA;KAEH,CAAD,CAAA;CAAC;;;;;;;;;;;;;;;;;;;;;A;A,I,+B,G,a,U,S,I,S,O,E,U,E,C,E,S,E;I,S,K,C,K,E;Q,O,K,Y,C,G,K,G,I,C,C,S,O,E;Y,O,C,K,C,C;S,C,C;K;I,O,I,C,C,I,C,C,G,O,C,A,C,C,S,O,E,M,E;Q,S,S,C,K,E;Y,I;gB,I,C,S,C,I,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,Q,C,K,E;Y,I;gB,I,C,S,C,O,C,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,I,C,M,E;Y,M,C,I,G,O,C,M,C,K,C,G,K,C,M,C,K,C,C,I,C,S,E,Q,C,C;S;Q,I,C,A,C,S,G,S,C,K,C,O,E,U,I,E,C,C,C,I,E,C,C;K,C,C;C,A;AFtBM,MAAM,yCAAe,GAAG,CAAO,OAAe,GAArD,+BAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;QACC,IAAI,CAAC,CAAA,GAAA,cAAO,CAAA,CAAC,cAAc,CAAC,OAAO,CAAC,EACnC,OAAO,KAAK,CAAA;QAGb,MAAM,iBAAiB,GAAG,MACzB,UAAU,CAAC,QACX,CAAC,cAAc,CAAC;qBAChB,OAAO;SACP,CAAC,AAAA;QACF,OAAO,iBAAiB,CAAA;KACxB,CAAA,AAAA;AAEK,SAAU,yCAAU,CAAC,GAAW,EAAtC;IACC,OAAO,CAAC,CAAC,GAAG,CAAA;CACZ;AAEK,SAAU,wCAAkB,CAAC,KAAa,EAAhD;IACC,OAAO,CAAC,CAAC,KAAK,CAAA;CACd;;A;AgBpBa,MAAO,wCAAQ;IAO5B,QAAQ,CAAC,UAAoB,EAA7B;QACC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,YAAY,EAAE,IAAM,UAAU,EAAE,CAAC,CAAA;KACzD;IAND,YAAY,QAAe,CAA3B;QACC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;KACxB;CAKD;;;A,I,+B,G,a,U,S,I,S,O,E,U,E,C,E,S,E;I,S,K,C,K,E;Q,O,K,Y,C,G,K,G,I,C,C,S,O,E;Y,O,C,K,C,C;S,C,C;K;I,O,I,C,C,I,C,C,G,O,C,A,C,C,S,O,E,M,E;Q,S,S,C,K,E;Y,I;gB,I,C,S,C,I,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,Q,C,K,E;Y,I;gB,I,C,S,C,O,C,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,I,C,M,E;Y,M,C,I,G,O,C,M,C,K,C,G,K,C,M,C,K,C,C,I,C,S,E,Q,C,C;S;Q,I,C,A,C,S,G,S,C,K,C,O,E,U,I,E,C,C,C,I,E,C,C;K,C,C;C,A;AHPK,MAAO,yCAAgB,SAAQ,CAAA,GAAA,wCAAQ,CAAA;IAC5C,GAAG,GAAH;QACC,OAAQ,IAAI,CAAC,QAAyB,CAAC,KAAK,CAAA;KAC5C;IAEK,GAAG,CAAC,GAAG,GAAG,CAAC,EAAX;Q,O,+B,C,I,E,K,C,E,K,C,E,Y;YACL,IAAI,GAAG,IAAI,CAAC,EAAE,MAAM,KAAK,CAAC,0BAA0B,CAAC,CAAA;YAErD,4CAA4C;YAC5C,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,CAC9B,MAAO,IAAI,CAAC,QAAyB,CAAC,GAAG,EAAE,CAAA;SAE5C,CAAD,CAAA;KAAC;CACD;AAED,MAAM,gCAAU,GAAG,CAClB,OAAe,EACf,OAAA,GAAmB,UAAU,CAAC,OAAO,GAFtC,+BAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;QAIC,IAAI,CAAC,OAAO,EAAE,MAAM,KAAK,CAAC,4BAA4B,CAAC,CAAA;QACvD,MAAM,OAAO,GAAG,MAAM,CAAA,GAAA,yCAAe,CAAA,CAAC,OAAO,CAAC,AAAA;QAC9C,IAAI,CAAC,OAAO,EAAE,MAAM,KAAK,CAAC,0BAA0B,CAAC,CAAA;QAErD,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,AAAA;QAC/C,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;QACrB,OAAO,IAAI,yCAAe,CAAC,QAAQ,CAAC,CAAA;KACpC,CAAA,AAAA;IAED,wCAAyB,GAAV,gCAAU;;AlBjCzB;;;;;A;;;AuBAA;;GAEG,C,I,+B,G,a,U,S,I,S,O,E,U,E,C,E,S,E;I,S,K,C,K,E;Q,O,K,Y,C,G,K,G,I,C,C,S,O,E;Y,O,C,K,C,C;S,C,C;K;I,O,I,C,C,I,C,C,G,O,C,A,C,C,S,O,E,M,E;Q,S,S,C,K,E;Y,I;gB,I,C,S,C,I,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,Q,C,K,E;Y,I;gB,I,C,S,C,O,C,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,I,C,M,E;Y,M,C,I,G,O,C,M,C,K,C,G,K,C,M,C,K,C,C,I,C,S,E,Q,C,C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C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,Q,C,K,E;Y,I;gB,I,C,S,C,O,C,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,I,C,M,E;Y,M,C,I,G,O,C,M,C,K,C,G,K,C,M,C,K,C,C,I,C,S,E,Q,C,C;S;Q,I,C,A,C,S,G,S,C,K,C,O,E,U,I,E,C,C,C,I,E,C,C;K,C,C;C,A;AE3DpB,MAAO,yCAAiB,SAAQ,CAAA,GAAA,wCAAQ,CAAA;IAC7C,QAAQ,GAAR;QACC,OAAO,IAAI,CAAC,QAA2B,CAAA;KACvC;IAED,GAAG,CAAC,GAAW,EAAf;QACC,IAAI,CAAC,GAAG,EAAE,MAAM,KAAK,CAAC,iBAAiB,CAAC,CAAA;QACxC,OAAQ,IAAI,CAAC,QAA4B,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;KAClD;IAED,iCAAiC;IACjC,MAAM,GAAN;QACC,OAAQ,IAAI,CAAC,QAA4B,CAAC,GAAG,CAAA;KAC7C;IAEK,GAAG,CAAC,KAAU,EAAd;Q,O,+B,C,I,E,K,C,E,K,C,E,Y;YACL,OAAQ,IAAI,CAAC,QAA4B,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;SACpD,CAAD,CAAA;KAAC;CACD;AAED,MAAM,iCAAW,GAAG,CACnB,OAAe,EACf,OAAA,GAAmB,UAAU,CAAC,OAAO,GAFtC,+BAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;QAIC,MAAM,KAAK,CAAC,iBAAiB,CAAC,CAAA;KAQ9B,CAAA,AAAA;IAED,wCAA0B,GAAX,iCAAW;;;;;;;A;;A,I,+B,G,a,U,S,I,S,O,E,U,E,C,E,S,E;I,S,K,C,K,E;Q,O,K,Y,C,G,K,G,I,C,C,S,O,E;Y,O,C,K,C,C;S,C,C;K;I,O,I,C,C,I,C,C,G,O,C,A,C,C,S,O,E,M,E;Q,S,S,C,K,E;Y,I;gB,I,C,S,C,I,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,Q,C,K,E;Y,I;gB,I,C,S,C,O,C,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,I,C,M,E;Y,M,C,I,G,O,C,M,C,K,C,G,K,C,M,C,K,C,C,I,C,S,E,Q,C,C;S;Q,I,C,A,C,S,G,S,C,K,C,O,E,U,I,E,C,C,C,I,E,C,C;K,C,C;C,A;AElCpB,MAAO,yCAAa,SAAQ,CAAA,GAAA,wCAAQ,CAAA;IACzC,QAAQ,GAAR;QACC,OAAO,IAAI,CAAC,QAA0B,CAAA;KACtC;IAED,GAAG,CAAC,GAAW,EAAf;QACC,IAAI,CAAC,GAAG,EAAE,MAAM,KAAK,CAAC,iBAAiB,CAAC,CAAA;QACxC,OAAQ,IAAI,CAAC,QAA2B,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,CAAA;KAC/D;IAED,GAAG,CAAC,KAAU,EAAd;QACC,OAAQ,IAAI,CAAC,QAA2B,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;KACnD;IAED,iCAAiC;IACjC,MAAM,GAAN;QACC,OAAQ,IAAI,CAAC,QAA2B,CAAC,GAAG,CAAA;KAC5C;IAEK,GAAG,CAAC,KAAU,EAAd;Q,O,+B,C,I,E,K,C,E,K,C,E,Y;YACL,OAAQ,IAAI,CAAC,QAA2B,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;SACnD,CAAD,CAAA;KAAC;CACD;AAED,MAAM,6BAAO,GAAG,CACf,OAAe,EACf,OAAA,GAAmB,UAAU,CAAC,OAAO,GAFtC,+BAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;QAIC,MAAM,KAAK,CAAC,iBAAiB,CAAC,CAAA;KAQ9B,CAAA,AAAA;IAED,wCAAsB,GAAP,6BAAO;;;;;;;A;;A,I,+B,G,a,U,S,I,S,O,E,U,E,C,E,S,E;I,S,K,C,K,E;Q,O,K,Y,C,G,K,G,I,C,C,S,O,E;Y,O,C,K,C,C;S,C,C;K;I,O,I,C,C,I,C,C,G,O,C,A,C,C,S,O,E,M,E;Q,S,S,C,K,E;Y,I;gB,I,C,S,C,I,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,Q,C,K,E;Y,I;gB,I,C,S,C,O,C,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,I,C,M,E;Y,M,C,I,G,O,C,M,C,K,C,G,K,C,M,C,K,C,C,I,C,S,E,Q,C,C;S;Q,I,C,A,C,S,G,S,C,K,C,O,E,U,I,E,C,C,C,I,E,C,C;K,C,C;C,A;AEtChB,MAAO,wCAAW,SAAQ,CAAA,GAAA,wCAAQ,CAAA;IACvC,QAAQ,GAAR;QACC,OAAO,IAAI,CAAC,QAAQ,CAAA;KACpB;IAED,GAAG,CAAC,GAAW,EAAf;QACC,IAAI,CAAC,GAAG,EAAE,MAAM,KAAK,CAAC,iBAAiB,CAAC,CAAA;QACxC,OAAQ,IAAI,CAAC,QAA0C,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;KAChE;IAED,MAAM,GAAN;QACC,OAAQ,IAAI,CAAC,QAA0C,CAAC,GAAG,CAAA;KAC3D;IAEK,GAAG,CAAC,GAAW,EAAE,KAAU,EAA3B;Q,O,+B,C,I,E,K,C,E,K,C,E,Y;YACL,IAAI,CAAC,GAAG,EAAE,MAAM,KAAK,CAAC,iBAAiB,CAAC,CAAA;YACxC,MAAO,IAAI,CAAC,QAA0C,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;SACtE,CAAD,CAAA;KAAC;IAEK,MAAM,CAAC,GAAW,EAAlB;Q,O,+B,C,I,E,K,C,E,K,C,E,Y;YACL,IAAI,CAAC,GAAG,EAAE,MAAM,KAAK,CAAC,iBAAiB,CAAC,CAAA;YACxC,MAAO,IAAI,CAAC,QAA0C,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;SAC/D,CAAD,CAAA;KAAC;CACD;AAED,MAAM,iCAAW,GAAG,CACnB,OAAe,EACf,OAAA,GAAmB,UAAU,CAAC,OAAO,GAFtC,+BAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;QAIC,IAAI,CAAC,OAAO,EAAE,MAAM,KAAK,CAAC,4BAA4B,CAAC,CAAA;QACvD,MAAM,OAAO,GAAG,MAAM,CAAA,GAAA,yCAAe,CAAA,CAAC,OAAO,CAAC,AAAA;QAC9C,IAAI,CAAC,OAAO,EAAE,MAAM,KAAK,CAAC,0BAA0B,CAAC,CAAA;QAErD,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,AAAA;QAChD,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;QACrB,OAAO,IAAI,wCAAU,CAAC,QAA4B,CAAC,CAAA;KACnD,CAAA,AAAA;IAED,wCAA0B,GAAX,iCAAW;;;;A;A,I,+B,G,a,U,S,I,S,O,E,U,E,C,E,S,E;I,S,K,C,K,E;Q,O,K,Y,C,G,K,G,I,C,C,S,O,E;Y,O,C,K,C,C;S,C,C;K;I,O,I,C,C,I,C,C,G,O,C,A,C,C,S,O,E,M,E;Q,S,S,C,K,E;Y,I;gB,I,C,S,C,I,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,Q,C,K,E;Y,I;gB,I,C,S,C,O,C,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,I,C,M,E;Y,M,C,I,G,O,C,M,C,K,C,G,K,C,M,C,K,C,C,I,C,S,E,Q,C,C;S;Q,I,C,A,C,S,G,S,C,K,C,O,E,U,I,E,C,C,C,I,E,C,C;K,C,C;C,A;A7B9B1B,MAAM,8BAAQ,GAAG,IAAI,GAAG,EAAE,AAAA;AAM1B,IAAK,kCAMJ,AAND;AAAA,CAAA,SAAK,YAAY,EAAjB;IACC,YAAA,CAAA,SAAA,CAAA,GAAA,SAAmB,CAAA;IACnB,YAAA,CAAA,UAAA,CAAA,GAAA,UAAqB,CAAA;IACrB,YAAA,CAAA,UAAA,CAAA,GAAA,UAAqB,CAAA;IACrB,YAAA,CAAA,MAAA,CAAA,GAAA,MAAa,CAAA;IACb,YAAA,CAAA,UAAA,CAAA,GAAA,UAAqB,CAAA;CACrB,CAAA,CANI,kCAAY,IAAZ,CAAA,kCAAY,GAAA,EAAA,CAAA,AAAA,CAAA,CAMhB;AAED,SAAe,2BAAK,CACnB,OAAe,EACf,IAAY,EACZ,OAAA,GAA2B,EAAE,EAH9B;I,O,+B,C,I,E,K,C,E,K,C,E,Y;QAKC,IAAI,EAAE,GAAoB,IAAI,AAAA;QAC9B,IAAI,8BAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,OAAO,8BAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;QAEvD,IAAI;YACH,OAAQ,IAAI;gBACX,KAAK,kCAAY,CAAC,OAAO;oBACxB,EAAE,GAAG,MAAM,CAAA,GAAA,iCAAU,CAAA,CAAC,OAAO,CAAC,CAAA;oBAC9B,MAAK;gBACN,KAAK,kCAAY,CAAC,QAAQ;oBACzB,EAAE,GAAG,MAAM,CAAA,GAAA,iCAAW,CAAA,CAAC,OAAO,EAAE,OAAO,CAAC,CAAA;oBACxC,MAAK;gBACN,KAAK,kCAAY,CAAC,QAAQ;oBACzB,EAAE,GAAG,MAAM,CAAA,GAAA,iCAAW,CAAA,CAAC,OAAO,CAAC,CAAA;oBAC/B,MAAK;gBACN,KAAK,kCAAY,CAAC,IAAI;oBACrB,EAAE,GAAG,MAAM,CAAA,GAAA,iCAAO,CAAA,CAAC,OAAO,CAAC,CAAA;oBAC3B,MAAK;gBACN,KAAK,kCAAY,CAAC,QAAQ;oBACzB,EAAE,GAAG,MAAM,CAAA,GAAA,iCAAW,CAAA,CAAC,OAAO,CAAC,CAAA;oBAC/B,MAAK;gBACN;oBACC,MAAM,IAAI,KAAK,CAAC,CAAA,uBAAA,EAA0B,IAAI,CAAA,CAAE,CAAC,CAAA;aAClD;YAED,8BAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC,CAAA;SACzB,CAAC,OAAO,CAAC,EAAE;YACX,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;SAChB;QAED,IAAI,CAAC,EAAE,EAAE,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAA;QAC9C,OAAO,EAAE,CAAA;KACT,CAAD,CAAA;CAAC;AAEK,SAAgB,yCAAO,CAAC,OAAe,EAA7C;I,O,+B,C,I,E,K,C,E,K,C,E,Y;QACC,MAAM,EAAE,GAAG,MAAM,2BAAK,CAAC,OAAO,EAAE,kCAAY,CAAC,OAAO,CAAC,AAAA;QACrD,OAAO,EAAqB,CAAA;KAC5B,CAAD,CAAA;CAAC;AAEK,SAAgB,yCAAQ,CAC7B,OAAe,EACf,OAAA,GAA2B;IAAE,OAAO,EAAE,KAAK;CAAE,EAF9C;I,O,+B,C,I,E,K,C,E,K,C,E,Y;QAIC,MAAM,EAAE,GAAG,MAAM,2BAAK,CAAC,OAAO,EAAE,kCAAY,CAAC,QAAQ,EAAE,OAAO,CAAC,AAAA;QAC/D,OAAO,EAAsB,CAAA;KAC7B,CAAD,CAAA;CAAC;AAEK,SAAgB,yCAAQ,CAAC,OAAe,EAA9C;I,O,+B,C,I,E,K,C,E,K,C,E,Y;QACC,MAAM,EAAE,GAAG,MAAM,2BAAK,CAAC,OAAO,EAAE,kCAAY,CAAC,QAAQ,CAAC,AAAA;QACtD,OAAO,EAAsB,CAAA;KAC7B,CAAD,CAAA;CAAC;AAEK,SAAgB,yCAAI,CAAC,OAAe,EAA1C;I,O,+B,C,I,E,K,C,E,K,C,E,Y;QACC,MAAM,EAAE,GAAG,MAAM,2BAAK,CAAC,OAAO,EAAE,kCAAY,CAAC,IAAI,CAAC,AAAA;QAClD,OAAO,EAAkB,CAAA;KACzB,CAAD,CAAA;CAAC;AAEK,SAAgB,yCAAQ,CAAC,OAAe,EAA9C;I,O,+B,C,I,E,K,C,E,K,C,E,Y;QACC,MAAM,EAAE,GAAG,MAAM,2BAAK,CAAC,OAAO,EAAE,kCAAY,CAAC,QAAQ,CAAC,AAAA;QACtD,OAAO,EAAgB,CAAA;KACvB,CAAD,CAAA;CAAC;AAEK,SAAU,yCAAS,GAAzB;IACC,OAAO,IAAI,CAAC,GAAG,EAAE,CAAA;CACjB;;;;A,I,+B,G,a,U,S,I,S,O,E,U,E,C,E,S,E;I,S,K,C,K,E;Q,O,K,Y,C,G,K,G,I,C,C,S,O,E;Y,O,C,K,C,C;S,C,C;K;I,O,I,C,C,I,C,C,G,O,C,A,C,C,S,O,E,M,E;Q,S,S,C,K,E;Y,I;gB,I,C,S,C,I,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,Q,C,K,E;Y,I;gB,I,C,S,C,O,C,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,I,C,M,E;Y,M,C,I,G,O,C,M,C,K,C,G,K,C,M,C,K,C,C,I,C,S,E,Q,C,C;S;Q,I,C,A,C,S,G,S,C,K,C,O,E,U,I,E,C,C,C,I,E,C,C;K,C,C;C,A;AAjFD,MAAM,yCAAI,GAAG,CAAO,aAA4B,GAAhD,+BAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;QACC,UAAU,CAAC,aAAa,GAAG,aAAa,CAAA;QAExC,OAAQ,aAAa,CAAC,SAAS;YAC9B,KAAK,CAAA,GAAA,yCAAiB,CAAA,CAAC,YAAY;gBAClC,MAAM,CAAA,GAAA,yBAAI,CAAA,CAAC,IAAI,EAAE,CAAA;gBACjB,MAAK;YACN;gBACC,MAAM,KAAK,CAAC,CAAA,wBAAA,EAA2B,aAAa,CAAC,SAAS,CAAA,CAAA,CAAG,CAAC,CAAA;SACnE;QAED,MAAM,CAAA,GAAA,iCAAQ,CAAA,EAAE,CAAA;QAChB,MAAM,CAAA,GAAA,iCAAW,CAAA,EAAE,CAAA;KACnB,CAAA,AAAA;AAED,MAAM,yCAAI,GAAG;kBACZ,yCAAY;WACZ,+BAAK;YACL,gCAAM;gBACN,yCAAU;CACV,AAAA;AAED,MAAM,yCAAQ,GAAG;eAChB,mCAAS;aACT,iCAAO;cACP,kCAAQ;cACR,kCAAQ;UACR,8BAAI;cACJ,kCAAQ;CACR,AAAA","sources":["src/index.ts","index.ts","src/blockchain/index.ts","src/blockchain/NEAR.ts","NEAR.ts","src/utils.ts","utils.ts","src/database/init.ts","init.ts","src/database/ipfs/index.ts","src/auth/index.ts","src/auth/actions.ts","actions.ts","src/auth/session.ts","session.ts","src/auth/init.ts","src/database/index.ts","src/database/wrappers/index.ts","src/database/wrappers/counter.ts","counter.ts","src/database/wrappers/utils.ts","src/database/wrappers/database.ts","database.ts","src/database/wrappers/docstore.ts","docstore.ts","src/database/wrappers/eventlog.ts","eventlog.ts","src/database/wrappers/feed.ts","feed.ts","src/database/wrappers/keyvalue.ts","keyvalue.ts"],"sourcesContent":["import { NEAR } from './blockchain'\nimport initOrbitDB from './database/Init'\nimport initAuth from './auth/Init'\nimport { getAccountId, login, logout, isLoggedIn } from './auth'\nimport {\n\ttimestamp,\n\tCounter,\n\tKeyValue,\n\tDocStore,\n\tFeed,\n\tEventLog,\n} from './database'\nimport { ProjectConfig } from './types/config'\nimport { BlockchainNetwork } from './utils'\n\nconst init = async (projectConfig: ProjectConfig) => {\n\tglobalThis.projectConfig = projectConfig\n\n\tswitch (projectConfig.chainType) {\n\t\tcase BlockchainNetwork.NEAR_TESTNET:\n\t\t\tawait NEAR.init()\n\t\t\tbreak\n\t\tdefault:\n\t\t\tthrow Error(`Unconfigured chainType '${projectConfig.chainType}'`)\n\t}\n\n\tawait initAuth()\n\tawait initOrbitDB()\n}\n\nconst Auth = {\n\tgetAccountId,\n\tlogin,\n\tlogout,\n\tisLoggedIn,\n}\n\nconst Database = {\n\ttimestamp,\n\tCounter,\n\tKeyValue,\n\tDocStore,\n\tFeed,\n\tEventLog,\n}\n\nexport { init, Auth, Database }\n",null,"import * as NEAR from './NEAR'\n\nexport {\n\t// eslint-disable-next-line import/prefer-default-export\n\tNEAR,\n}\n","import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'\nimport { getBlockchainType } from '../utils'\n\nexport interface Three0Contract {\n\tvalid_database: ValidDatabaseFunction\n\tget_user: GetUserFunction\n\tuser_action: UserActionFunction\n}\n\ntype ValidDatabaseFunction = (\n\tdatabase_id: ValidDatabaseParams\n) => Promise<boolean>\ntype GetUserFunction = (user_id: GetUserParams) => Promise<User>\ntype UserActionFunction = (action: UserActionParams) => Promise<void>\n\ninterface User {\n\taccount_id: string\n\tis_online: boolean\n\tcreated_at: bigint\n\tlast_online: bigint\n}\n\ninterface ValidDatabaseParams {\n\taddress: string\n}\n\ninterface GetUserParams {\n\taccount_id: string\n}\n\ninterface UserActionParams {\n\taction: UserActionType\n}\n\nexport enum UserActionType {\n\tLOGIN = 'LOGIN',\n\tLOGOUT = 'LOGOUT',\n}\n\nexport function getNearConfig() {\n\tconst CONTRACT_NAME = globalThis.projectConfig.contractName\n\tconst chainType = getBlockchainType()\n\n\tswitch (chainType) {\n\t\tcase 'mainnet':\n\t\t\treturn {\n\t\t\t\tnetworkId: 'mainnet',\n\t\t\t\tnodeUrl: 'https://rpc.mainnet.near.org',\n\t\t\t\tcontractName: CONTRACT_NAME,\n\t\t\t\twalletUrl: 'https://wallet.near.org',\n\t\t\t\thelperUrl: 'https://helper.mainnet.near.org',\n\t\t\t\texplorerUrl: 'https://explorer.mainnet.near.org',\n\t\t\t}\n\t\tcase 'production':\n\t\tcase 'development':\n\t\tcase 'testnet':\n\t\t\treturn {\n\t\t\t\tnetworkId: 'testnet',\n\t\t\t\tnodeUrl: 'https://rpc.testnet.near.org',\n\t\t\t\tcontractName: CONTRACT_NAME,\n\t\t\t\twalletUrl: 'https://wallet.testnet.near.org',\n\t\t\t\thelperUrl: 'https://helper.testnet.near.org',\n\t\t\t\texplorerUrl: 'https://explorer.testnet.near.org',\n\t\t\t}\n\t\tcase 'betanet':\n\t\t\treturn {\n\t\t\t\tnetworkId: 'betanet',\n\t\t\t\tnodeUrl: 'https://rpc.betanet.near.org',\n\t\t\t\tcontractName: CONTRACT_NAME,\n\t\t\t\twalletUrl: 'https://wallet.betanet.near.org',\n\t\t\t\thelperUrl: 'https://helper.betanet.near.org',\n\t\t\t\texplorerUrl: 'https://explorer.betanet.near.org',\n\t\t\t}\n\t\tcase 'local':\n\t\t\treturn {\n\t\t\t\tnetworkId: 'local',\n\t\t\t\tnodeUrl: 'http://localhost:3030',\n\t\t\t\tkeyPath: `${process.env.HOME}/.near/validator_key.json`,\n\t\t\t\twalletUrl: 'http://localhost:4000/wallet',\n\t\t\t\tcontractName: CONTRACT_NAME,\n\t\t\t}\n\t\tcase 'test':\n\t\tcase 'ci':\n\t\t\treturn {\n\t\t\t\tnetworkId: 'shared-test',\n\t\t\t\tnodeUrl: 'https://rpc.ci-testnet.near.org',\n\t\t\t\tcontractName: CONTRACT_NAME,\n\t\t\t\tmasterAccount: 'test.near',\n\t\t\t}\n\t\tcase 'ci-betanet':\n\t\t\treturn {\n\t\t\t\tnetworkId: 'shared-test-staging',\n\t\t\t\tnodeUrl: 'https://rpc.ci-betanet.near.org',\n\t\t\t\tcontractName: CONTRACT_NAME,\n\t\t\t\tmasterAccount: 'test.near',\n\t\t\t}\n\t\tdefault:\n\t\t\tthrow Error(\n\t\t\t\t`Unconfigured environment '${chainType}'. Can be configured in src/config.js.`\n\t\t\t)\n\t}\n}\n\n// Initialize contract & set global variables\nexport async function init() {\n\tconst nearConfig = getNearConfig()\n\n\t// Initialize connection to the NEAR testnet\n\tconst near = await connect({\n\t\tdeps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() },\n\t\t...nearConfig,\n\t\theaders: {},\n\t})\n\n\t// Initializing Wallet based Account. It can work with NEAR testnet wallet that\n\t// is hosted at https://wallet.testnet.near.org\n\tglobalThis.walletConnection = new WalletConnection(near, null)\n\n\t// Initializing our contract APIs by contract name and configuration\n\tglobalThis.contract = new Contract(\n\t\tglobalThis.walletConnection.account(),\n\t\tnearConfig.contractName,\n\t\t{\n\t\t\t// View methods are read only. They don't modify the state, but usually return some value.\n\t\t\tviewMethods: ['get_user', 'valid_database'],\n\t\t\t// Change methods can modify the state. But you don't receive the returned value when called.\n\t\t\tchangeMethods: ['user_action'],\n\t\t}\n\t)\n}\n",null,"export const enum BlockchainNetwork {\n\tNEAR_TESTNET = 'NEAR_TESTNET',\n}\n\nexport function getBlockchainType() {\n\tswitch (globalThis.projectConfig.chainType) {\n\t\tcase BlockchainNetwork.NEAR_TESTNET:\n\t\t\treturn 'testnet'\n\t\tdefault:\n\t\t\tthrow Error(\n\t\t\t\t`Unconfigured chainType '${globalThis.projectConfig.chainType}'`\n\t\t\t)\n\t}\n}\n\nexport function getQueryParams() {\n\t// eslint-disable-next-line no-restricted-globals\n\treturn new URLSearchParams(location.search)\n}\n",null,"// import IdentityProvider from 'orbit-db-identity-provider';\nimport OrbitDB from 'orbit-db'\nimport initIPFS from './ipfs'\n// import NearIdentityProvider from './identities/NEAR';\nimport { isLoggedIn } from '../auth'\n\n// Start OrbitDB\nconst initOrbitDB = async () => {\n\tif (globalThis.orbitdb) return\n\n\tconst ipfs = await initIPFS()\n\tconst loggedIn = isLoggedIn()\n\n\tif (loggedIn) {\n\t\tif (globalThis.projectConfig.chainType.includes('NEAR')) {\n\t\t\t// IdentityProvider.addIdentityProvider(NearIdentityProvider);\n\t\t\t// const identity = await IdentityProvider.createIdentity({ type: 'NearIdentity' });\n\t\t\t// const orbitdb = await OrbitDB.createInstance(ipfs, {identity});\n\t\t\tglobalThis.orbitdb = await OrbitDB.createInstance(ipfs)\n\t\t}\n\t} else {\n\t\tglobalThis.orbitdb = await OrbitDB.createInstance(ipfs)\n\t}\n}\n\nexport default initOrbitDB\n",null,"import * as IPFS from 'ipfs-core'\nimport { IPFSOptions } from 'ipfs-core/src/components/network'\n\nlet ipfs: IPFS.IPFS\n\nconst IPFS_CONFIG: IPFSOptions = {\n\tstart: true,\n\tEXPERIMENTAL: {\n\t\tipnsPubsub: true,\n\t},\n\tpreload: {\n\t\tenabled: false,\n\t},\n\tconfig: {\n\t\tAddresses: {\n\t\t\tSwarm: [\n\t\t\t\t'/dns4/three0-rtc-node.herokuapp.com/tcp/443/wss/p2p-webrtc-star/',\n\t\t\t\t// '/dns4/p2p-circuit-constellation.herokuapp.com/tcp/443/wss/p2p/QmY8XpuX6VnaUVDz4uA14vpjv3CZYLif3wLPqCkgU2KLSB',\n\t\t\t],\n\t\t},\n\t},\n}\n\nconst initIPFS = async (): Promise<IPFS.IPFS> => {\n\tipfs = ipfs || (await IPFS.create(IPFS_CONFIG))\n\treturn ipfs\n}\n\nexport default initIPFS\n","import { login, logout } from './Actions'\nimport { getAccountId, isLoggedIn } from './Session'\n\nexport { login, logout, getAccountId, isLoggedIn }\n","import { Three0Contract, UserActionType } from '../blockchain/NEAR'\n\nexport async function logout() {\n\ttry {\n\t\tawait (globalThis.contract as unknown as Three0Contract).user_action({\n\t\t\taction: UserActionType.LOGOUT,\n\t\t})\n\t\tglobalThis.walletConnection.signOut()\n\t} catch (e) {\n\t\tconsole.error(e)\n\t\tthrow e\n\t}\n}\n\nexport async function login(\n\tappName = 'My Three0 App',\n\tsuccessUrL = window.location.href,\n\tfailureUrL = window.location.href\n) {\n\tglobalThis.walletConnection.requestSignIn(\n\t\tglobalThis.projectConfig.contractName,\n\t\tappName,\n\t\tsuccessUrL,\n\t\tfailureUrL\n\t)\n}\n",null,"export function isLoggedIn(): boolean {\n\treturn globalThis.walletConnection.isSignedIn()\n}\n\nexport function getAccountId(): string {\n\treturn globalThis.walletConnection.getAccountId()\n}\n",null,"import { Three0Contract, UserActionType } from '../blockchain/NEAR'\nimport { isLoggedIn as isLoggedInLocally, getAccountId } from './Session'\n\nexport default async function initAuth() {\n\tif (!isLoggedInLocally()) return\n\n\tlet isLoggedIn = true\n\n\ttry {\n\t\tconst user = await (\n\t\t\tglobalThis.contract as unknown as Three0Contract\n\t\t).get_user({\n\t\t\taccount_id: getAccountId(),\n\t\t})\n\t\tisLoggedIn = user.is_online\n\t} catch (e) {\n\t\tconsole.error(e)\n\t\tisLoggedIn = false\n\t}\n\n\tif (!isLoggedIn) {\n\t\tawait (globalThis.contract as unknown as Three0Contract).user_action({\n\t\t\taction: UserActionType.LOGIN,\n\t\t})\n\t}\n}\n","import {\n\tgetCounter,\n\tgetDocStore,\n\tgetEventLog,\n\tgetFeed,\n\tgetKeyValue,\n\tCounterDatabase,\n\tDocumentDatabase,\n\tEventLogDatabase,\n\tFeedDatabase,\n\tKVDatabase,\n} from './wrappers'\nimport Database from './wrappers/Database'\n\nconst cacheMap = new Map()\n\ntype DocStoreOptions = {\n\tindexBy?: string\n}\n\nenum DatabaseType {\n\tCounter = 'counter',\n\tDocStore = 'docstore',\n\tEventLog = 'eventlog',\n\tFeed = 'feed',\n\tKeyValue = 'keyvalue',\n}\n\nasync function getDB(\n\taddress: string,\n\ttype: string,\n\toptions: DocStoreOptions = {}\n): Promise<Database> {\n\tlet db: Database | null = null\n\tif (cacheMap.has(address)) return cacheMap.get(address)\n\n\ttry {\n\t\tswitch (type) {\n\t\t\tcase DatabaseType.Counter:\n\t\t\t\tdb = await getCounter(address)\n\t\t\t\tbreak\n\t\t\tcase DatabaseType.DocStore:\n\t\t\t\tdb = await getDocStore(address, options)\n\t\t\t\tbreak\n\t\t\tcase DatabaseType.EventLog:\n\t\t\t\tdb = await getEventLog(address)\n\t\t\t\tbreak\n\t\t\tcase DatabaseType.Feed:\n\t\t\t\tdb = await getFeed(address)\n\t\t\t\tbreak\n\t\t\tcase DatabaseType.KeyValue:\n\t\t\t\tdb = await getKeyValue(address)\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unknown database type: ${type}`)\n\t\t}\n\n\t\tcacheMap.set(address, db)\n\t} catch (e) {\n\t\tconsole.error(e)\n\t}\n\n\tif (!db) throw new Error('Database not found')\n\treturn db\n}\n\nexport async function Counter(address: string): Promise<CounterDatabase> {\n\tconst db = await getDB(address, DatabaseType.Counter)\n\treturn db as CounterDatabase\n}\n\nexport async function DocStore(\n\taddress: string,\n\toptions: DocStoreOptions = { indexBy: '_id' }\n): Promise<DocumentDatabase> {\n\tconst db = await getDB(address, DatabaseType.DocStore, options)\n\treturn db as DocumentDatabase\n}\n\nexport async function EventLog(address: string): Promise<EventLogDatabase> {\n\tconst db = await getDB(address, DatabaseType.EventLog)\n\treturn db as EventLogDatabase\n}\n\nexport async function Feed(address: string): Promise<FeedDatabase> {\n\tconst db = await getDB(address, DatabaseType.Feed)\n\treturn db as FeedDatabase\n}\n\nexport async function KeyValue(address: string): Promise<KVDatabase> {\n\tconst db = await getDB(address, DatabaseType.KeyValue)\n\treturn db as KVDatabase\n}\n\nexport function timestamp() {\n\treturn Date.now()\n}\n","import getCounter, { CounterDatabase } from './Counter'\nimport getDocStore, { DocumentDatabase } from './Docstore'\nimport getEventLog, { EventLogDatabase } from './Eventlog'\nimport getFeed, { FeedDatabase } from './Feed'\nimport getKeyValue, { KVDatabase } from './Keyvalue'\n\nexport { getCounter, getDocStore, getEventLog, getFeed, getKeyValue }\nexport {\n\tCounterDatabase,\n\tDocumentDatabase,\n\tEventLogDatabase,\n\tFeedDatabase,\n\tKVDatabase,\n}\n","import CounterStore from 'orbit-db-counterstore'\nimport OrbitDB from 'orbit-db'\nimport { isValidDatabase } from './Utils'\nimport Database from './Database'\n\nexport class CounterDatabase extends Database {\n\tget() {\n\t\treturn (this.database as CounterStore).value\n\t}\n\n\tasync inc(amt = 1) {\n\t\tif (amt >= 1) throw Error('Valid amount is required')\n\n\t\t// TODO: Add support for multiple increments\n\t\tfor (let i = 0; i < amt; i += 1) {\n\t\t\tawait (this.database as CounterStore).inc()\n\t\t}\n\t}\n}\n\nconst getCounter = async (\n\taddress: string,\n\torbitdb: OrbitDB = globalThis.orbitdb\n) => {\n\tif (!orbitdb) throw Error('OrbitDB is not initialized')\n\tconst isValid = await isValidDatabase(address)\n\tif (!isValid) throw Error('Invalid database address')\n\n\tconst database = await orbitdb.counter(address)\n\tawait database.load()\n\treturn new CounterDatabase(database)\n}\n\nexport default getCounter\n",null,"import OrbitDB from 'orbit-db'\nimport { Three0Contract } from '../../blockchain/NEAR'\n\nexport const isValidDatabase = async (address: string) => {\n\tif (!OrbitDB.isValidAddress(address)) {\n\t\treturn false\n\t}\n\n\tconst isProjectDatabase = await (\n\t\tglobalThis.contract as unknown as Three0Contract\n\t).valid_database({\n\t\taddress,\n\t})\n\treturn isProjectDatabase\n}\n\nexport function isValidKey(key: string) {\n\treturn !!key\n}\n\nexport function isValidValueObject(value: Object) {\n\treturn !!value\n}\n","import Store from 'orbit-db-store'\n\nexport default class Database {\n\tprotected readonly database: Store\n\n\tconstructor(database: Store) {\n\t\tthis.database = database\n\t}\n\n\tonChange(callbackfn: Function) {\n\t\tthis.database.events.on('replicated', () => callbackfn())\n\t}\n}\n",null,"/**\n * @module Docstore\n */\n\nimport OrbitDB from 'orbit-db'\nimport DocumentStore from 'orbit-db-docstore'\nimport { v4 as uuidv4 } from 'uuid'\nimport Database from './Database'\nimport { isValidDatabase, isValidKey, isValidValueObject } from './Utils'\n\nexport class DocumentDatabase extends Database {\n\tget(key?: string) {\n\t\treturn key\n\t\t\t? (this.database as DocumentStore<Object>).get(key)[0]\n\t\t\t: this.where((e) => e !== null)\n\t}\n\n\twhere(callbackfn: (value: Object) => boolean): Array<Object> {\n\t\treturn (this.database as DocumentStore<Object>).query(callbackfn)\n\t}\n\n\tasync set(key: string, value: Object) {\n\t\tif (!isValidKey(key)) throw Error('Key is required')\n\t\tif (!isValidValueObject(value)) throw Error('Value is required')\n\t\tawait (this.database as DocumentStore<Object>).put({ _id: key, ...value })\n\t}\n\n\tasync add(value: Object) {\n\t\tconst id = uuidv4()\n\t\tif (!isValidValueObject(value)) throw Error('Value is required')\n\t\tawait this.set(id, value)\n\t\treturn id\n\t}\n\n\tasync delete(key: string) {\n\t\tif (!isValidKey(key)) throw Error('Key is required')\n\t\tawait (this.database as DocumentStore<Object>).del(key)\n\t}\n\n\tasync update(key: string, value: Object) {\n\t\tif (!isValidKey(key)) throw Error('Key is required')\n\t\tif (!isValidValueObject(value)) throw Error('Value is required')\n\n\t\tconst doc = this.get(key)\n\t\tawait this.set(key, { ...doc, ...value })\n\t}\n}\n\nconst getDocStore = async (\n\taddress: string,\n\tindexBy: Object,\n\torbitdb: OrbitDB = globalThis.orbitdb\n) => {\n\tif (!orbitdb) throw Error('OrbitDB is not initialized')\n\tconst isValid = await isValidDatabase(address)\n\tif (!isValid) throw Error('Invalid database address')\n\n\tconst database = (await orbitdb.docs(\n\t\taddress,\n\t\tindexBy\n\t)) as DocumentStore<Object>\n\tawait database.load()\n\treturn new DocumentDatabase(database)\n}\n\nexport default getDocStore\n",null,"/* eslint-disable no-unused-vars */\nimport OrbitDB from 'orbit-db'\nimport EventStore from 'orbit-db-eventstore'\nimport Database from './Database'\nimport { isValidDatabase } from './Utils'\n\nexport class EventLogDatabase extends Database {\n\tinstance() {\n\t\treturn this.database as EventStore<any>\n\t}\n\n\tget(key: string) {\n\t\tif (!key) throw Error('Key is required')\n\t\treturn (this.database as EventStore<any>).get(key)\n\t}\n\n\t// TODO Should we implement this?\n\tgetAll() {\n\t\treturn (this.database as EventStore<any>).all\n\t}\n\n\tasync set(value: any) {\n\t\treturn (this.database as EventStore<any>).add(value)\n\t}\n}\n\nconst getEventLog = async (\n\taddress: string,\n\torbitdb: OrbitDB = globalThis.orbitdb\n) => {\n\tthrow Error('Not implemented')\n\n\tif (!orbitdb) throw Error('OrbitDB is not initialized')\n\tconst isValid = await isValidDatabase(address)\n\tif (!isValid) throw Error('Invalid database address')\n\n\tconst database = await orbitdb.log(address)\n\treturn new EventLogDatabase(database)\n}\n\nexport default getEventLog\n",null,"/* eslint-disable no-unused-vars */\nimport OrbitDB from 'orbit-db'\nimport FeedStore from 'orbit-db-feedstore'\nimport Database from './Database'\nimport { isValidDatabase } from './Utils'\n\nexport class FeedDatabase extends Database {\n\tinstance() {\n\t\treturn this.database as FeedStore<any>\n\t}\n\n\tget(key: string) {\n\t\tif (!key) throw Error('Key is required')\n\t\treturn (this.database as FeedStore<any>).get(key).payload.value\n\t}\n\n\tadd(value: any) {\n\t\treturn (this.database as FeedStore<any>).add(value)\n\t}\n\n\t// TODO Should we implement this?\n\tgetAll() {\n\t\treturn (this.database as FeedStore<any>).all\n\t}\n\n\tasync set(value: any) {\n\t\treturn (this.database as FeedStore<any>).add(value)\n\t}\n}\n\nconst getFeed = async (\n\taddress: string,\n\torbitdb: OrbitDB = globalThis.orbitdb\n) => {\n\tthrow Error('Not implemented')\n\n\tif (!orbitdb) throw Error('OrbitDB is not initialized')\n\tconst isValid = await isValidDatabase(address)\n\tif (!isValid) throw Error('Invalid database address')\n\n\tconst database = await orbitdb.log(address)\n\treturn new FeedDatabase(database)\n}\n\nexport default getFeed\n",null,"import OrbitDB from 'orbit-db'\nimport KeyValueStore from 'orbit-db-kvstore'\nimport Store from 'orbit-db-store'\nimport Database from './Database'\nimport { isValidDatabase } from './Utils'\n\nexport class KVDatabase extends Database {\n\tinstance() {\n\t\treturn this.database\n\t}\n\n\tget(key: string) {\n\t\tif (!key) throw Error('Key is required')\n\t\treturn (this.database as unknown as KeyValueStore<any>).get(key)\n\t}\n\n\tgetAll() {\n\t\treturn (this.database as unknown as KeyValueStore<any>).all\n\t}\n\n\tasync set(key: string, value: any) {\n\t\tif (!key) throw Error('Key is required')\n\t\tawait (this.database as unknown as KeyValueStore<any>).put(key, value)\n\t}\n\n\tasync delete(key: string) {\n\t\tif (!key) throw Error('Key is required')\n\t\tawait (this.database as unknown as KeyValueStore<any>).del(key)\n\t}\n}\n\nconst getKeyValue = async (\n\taddress: string,\n\torbitdb: OrbitDB = globalThis.orbitdb\n) => {\n\tif (!orbitdb) throw Error('OrbitDB is not initialized')\n\tconst isValid = await isValidDatabase(address)\n\tif (!isValid) throw Error('Invalid database address')\n\n\tconst database = await orbitdb.keyvalue(address)\n\tawait database.load()\n\treturn new KVDatabase(database as unknown as Store)\n}\n\nexport default getKeyValue\n",null],"names":[],"version":3,"file":"index.js.map"}